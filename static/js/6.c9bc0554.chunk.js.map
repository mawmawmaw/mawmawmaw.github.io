{"version":3,"sources":["../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck.js","../node_modules/@emailjs/browser/es/store/store.js","../node_modules/@emailjs/browser/es/utils/validateParams.js","../node_modules/@emailjs/browser/es/models/EmailJSResponseStatus.js","../node_modules/@emailjs/browser/es/api/sendPost.js","../node_modules/@emailjs/browser/es/index.js","../node_modules/@emailjs/browser/es/methods/sendForm/sendForm.js","components/Content/Contact/Contact.js"],"names":["_classCallCheck","instance","Constructor","TypeError","store","_origin","validateParams","publicKey","serviceID","templateID","EmailJSResponseStatus","httpResponse","this","status","text","responseText","sendPost","url","data","headers","Promise","resolve","reject","xhr","XMLHttpRequest","addEventListener","target","responseStatus","open","Object","keys","forEach","key","setRequestHeader","send","form","uID","_userID","currentForm","document","querySelector","nodeName","findHTMLForm","formData","FormData","append","Contact","useState","name","setName","email","setEmail","message","setMessage","sending","setSending","sent","setSent","error","setError","errorMsg","setErrorMsg","useRef","sendEmail","e","preventDefault","emailjs","current","then","result","console","log","id","className","ref","onSubmit","type","placeholder","value","onChange","style","borderImageSource","border_dark","border_blue"],"mappings":"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","file":"static/js/6.c9bc0554.chunk.js","sourcesContent":["export default function _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}","export const store = {\n    _origin: 'https://api.emailjs.com',\n};\n","export const validateParams = (publicKey, serviceID, templateID) => {\n    if (!publicKey) {\n        throw 'The public key is required. Visit https://dashboard.emailjs.com/admin/account';\n    }\n    if (!serviceID) {\n        throw 'The service ID is required. Visit https://dashboard.emailjs.com/admin';\n    }\n    if (!templateID) {\n        throw 'The template ID is required. Visit https://dashboard.emailjs.com/admin/templates';\n    }\n    return true;\n};\n","export class EmailJSResponseStatus {\n    constructor(httpResponse) {\n        this.status = httpResponse.status;\n        this.text = httpResponse.responseText;\n    }\n}\n","import { EmailJSResponseStatus } from '../models/EmailJSResponseStatus';\nimport { store } from '../store/store';\nexport const sendPost = (url, data, headers = {}) => {\n    return new Promise((resolve, reject) => {\n        const xhr = new XMLHttpRequest();\n        xhr.addEventListener('load', ({ target }) => {\n            const responseStatus = new EmailJSResponseStatus(target);\n            if (responseStatus.status === 200 || responseStatus.text === 'OK') {\n                resolve(responseStatus);\n            }\n            else {\n                reject(responseStatus);\n            }\n        });\n        xhr.addEventListener('error', ({ target }) => {\n            reject(new EmailJSResponseStatus(target));\n        });\n        xhr.open('POST', store._origin + url, true);\n        Object.keys(headers).forEach((key) => {\n            xhr.setRequestHeader(key, headers[key]);\n        });\n        xhr.send(data);\n    });\n};\n","import { init } from './methods/init/init';\nimport { send } from './methods/send/send';\nimport { sendForm } from './methods/sendForm/sendForm';\nexport { init, send, sendForm };\nexport default {\n    init,\n    send,\n    sendForm,\n};\n","import { store } from '../../store/store';\nimport { validateParams } from '../../utils/validateParams';\nimport { sendPost } from '../../api/sendPost';\nconst findHTMLForm = (form) => {\n    let currentForm;\n    if (typeof form === 'string') {\n        currentForm = document.querySelector(form);\n    }\n    else {\n        currentForm = form;\n    }\n    if (!currentForm || currentForm.nodeName !== 'FORM') {\n        throw 'The 3rd parameter is expected to be the HTML form element or the style selector of form';\n    }\n    return currentForm;\n};\n/**\n * Send a form the specific EmailJS service\n * @param {string} serviceID - the EmailJS service ID\n * @param {string} templateID - the EmailJS template ID\n * @param {string | HTMLFormElement} form - the form element or selector\n * @param {string} publicKey - the EmailJS public key\n * @returns {Promise<EmailJSResponseStatus>}\n */\nexport const sendForm = (serviceID, templateID, form, publicKey) => {\n    const uID = publicKey || store._userID;\n    const currentForm = findHTMLForm(form);\n    validateParams(uID, serviceID, templateID);\n    const formData = new FormData(currentForm);\n    formData.append('lib_version', '3.6.2');\n    formData.append('service_id', serviceID);\n    formData.append('template_id', templateID);\n    formData.append('user_id', uID);\n    return sendPost('/api/v1.0/email/send-form', formData);\n};\n","import React, {useRef, useState} from 'react';\r\nimport emailjs from '@emailjs/browser';\r\n\r\nimport border_dark from '../../../img/border_dark.svg';\r\nimport border_blue from '../../../img/border_blue.svg';\r\n\r\nimport './Contact.css';\r\n\r\nconst Contact = () => {\r\n\r\n    const [name, setName] = useState('');\r\n    const [email, setEmail] = useState('');\r\n    const [message, setMessage] = useState('');\r\n    const [sending, setSending] = useState(false);\r\n    const [sent, setSent] = useState(false);\r\n    const [error, setError] = useState(false);\r\n    const [errorMsg, setErrorMsg] = useState('');\r\n\r\n    const form = useRef();\r\n\r\n    const sendEmail = (e) => {\r\n        e.preventDefault();\r\n        setSending(true);\r\n        emailjs.sendForm('service_q3stgbj', 'template_hb21y1x', form.current, 'ez1gnij5WiOdzyc5t')\r\n        .then((result) => {\r\n            console.log(result.text);\r\n            setSending(false);\r\n            setSent(true);\r\n        }, (error) => {\r\n            console.log(error.text);\r\n            setError(true);\r\n            setErrorMsg(error.text);\r\n        });\r\n    };\r\n\r\n    const renderForm = () => {\r\n        if(sending){\r\n            return (\r\n                <div id=\"sending-mail\">\r\n                    <i className=\"spinner icon\"></i>\r\n                </div>\r\n            )\r\n        }\r\n        if (sent && !error && !sending){\r\n            return (\r\n                <div className=\"ui positive message\">\r\n                    <div className=\"header\">\r\n                        Message sent succesfully.\r\n                    </div>\r\n                </div>\r\n            )\r\n        }\r\n        else{\r\n            return (\r\n                <>\r\n                    <p>Feel free to leave a message.</p>\r\n                    {\r\n                        !error || \r\n                        <div className=\"ui negative message\">\r\n                            <div className=\"header\">{errorMsg}</div>\r\n                        </div>\r\n                    }\r\n                    <form className=\"ui form\" id=\"contact-form\" ref={form} onSubmit={sendEmail}>\r\n                        <div className=\"field\">\r\n                            <input id=\"name\" name=\"name\" type=\"text\" placeholder=\"Your name goes here\" value={name} onChange={(e)=>{setName(e.target.value)}} style={{borderImageSource: `url(${border_dark})`}}/>\r\n                        </div>\r\n                        <div className=\"field\">\r\n                            <input id=\"email\" name=\"email\" type=\"email\" placeholder=\"Your email goes here\" value={email} onChange={(e)=>{setEmail(e.target.value)}} style={{borderImageSource: `url(${border_dark})`}}/>\r\n                        </div>\r\n                        <div className=\"field\">\r\n                            <textarea id=\"message\" name=\"message\" placeholder=\"And your message here\" value={message} onChange={(e)=>{setMessage(e.target.value)}} style={{borderImageSource: `url(${border_dark})`}}></textarea>\r\n                        </div>\r\n                        <button className=\"ui blue button\" type=\"submit\" style={{borderImageSource: `url(${border_blue})`}}>Submit</button>\r\n                    </form>\r\n                </>\r\n            )\r\n        }\r\n    }\r\n    return (\r\n        <div id=\"contact\">\r\n            <h1>Contact</h1>\r\n            {renderForm()}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Contact;"],"sourceRoot":""}