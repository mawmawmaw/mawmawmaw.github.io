{"version":3,"file":"static/js/19.72b49d9a.chunk.js","mappings":"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","sources":["components/Content/BrowserWindow/BrowserWindow.tsx","components/Content/Content.tsx"],"sourcesContent":["import React, { useState } from 'react';\nimport './BrowserWindow.css';\n\ninterface BrowserWindowProps {\n  currentSection: string;\n  children: React.ReactNode;\n  onNavigate: (action: string) => void;\n  onClose?: () => void;\n  onOpen?: () => void;\n  isMobile?: boolean;\n  browserOpen?: boolean;\n}\n\n// SVG Icon Components\nconst BackIcon = () => (\n  <svg viewBox=\"0 0 16 16\" width=\"14\" height=\"14\" fill=\"currentColor\">\n    <path d=\"M10 3L5 8l5 5V3z\" />\n    <rect x=\"3\" y=\"7\" width=\"8\" height=\"2\" />\n  </svg>\n);\n\nconst ForwardIcon = () => (\n  <svg viewBox=\"0 0 16 16\" width=\"14\" height=\"14\" fill=\"currentColor\">\n    <path d=\"M6 3l5 5-5 5V3z\" />\n    <rect x=\"5\" y=\"7\" width=\"8\" height=\"2\" />\n  </svg>\n);\n\nconst RefreshIcon = () => (\n  <svg\n    viewBox=\"0 0 16 16\"\n    width=\"14\"\n    height=\"14\"\n    fill=\"none\"\n    stroke=\"currentColor\"\n    strokeWidth=\"1.5\"\n  >\n    <path\n      d=\"M14 8a6 6 0 0 1-6 6 6 6 0 0 1-6-6 6 6 0 0 1 6-6 6 6 0 0 1 5.5 3.5\"\n      strokeLinecap=\"round\"\n    />\n    <polyline points=\"11 2 14 2 14 5\" />\n  </svg>\n);\n\nconst StopIcon = () => (\n  <svg viewBox=\"0 0 16 16\" width=\"14\" height=\"14\" fill=\"currentColor\">\n    <rect x=\"4\" y=\"4\" width=\"8\" height=\"8\" />\n  </svg>\n);\n\nconst HomeIcon = () => (\n  <svg viewBox=\"0 0 16 16\" width=\"14\" height=\"14\" fill=\"currentColor\">\n    <path d=\"M2 8l6-5 6 5v5a1 1 0 0 1-1 1H9v-4H7v4H3a1 1 0 0 1-1-1V8z\" />\n    <polygon points=\"8,1 1,7 2,8 8,3 14,8 15,7\" />\n  </svg>\n);\n\nconst BrowserWindow: React.FC<BrowserWindowProps> = ({\n  currentSection,\n  children,\n  onNavigate,\n  onClose,\n  onOpen,\n  isMobile = false,\n  browserOpen = true,\n}) => {\n  const [isMaximized, setIsMaximized] = useState(false);\n\n  const getSectionUrl = (section: string): string => {\n    const urls: { [key: string]: string } = {\n      '': 'http://maw.dev/index.html',\n      'goTo-about': 'http://maw.dev/about-me.htm',\n      'goTo-work': 'http://maw.dev/work/tech-stack.html',\n      'goTo-portfolio': 'http://maw.dev/portfolio/gallery.cgi',\n      'goTo-contact': 'http://maw.dev/contact/guestbook.php',\n    };\n    return urls[section] || 'http://maw.dev/';\n  };\n\n  const getSectionTitle = (section: string): string => {\n    const titles: { [key: string]: string } = {\n      '': 'Welcome to Maw.dev - Web Explorer',\n      'goTo-about': 'About Me - Web Explorer',\n      'goTo-work': 'Tech Stack - Web Explorer',\n      'goTo-portfolio': 'Portfolio Gallery - Web Explorer',\n      'goTo-contact': 'Contact Form - Web Explorer',\n    };\n    return titles[section] || 'Maw.dev - Web Explorer';\n  };\n\n  const handleBack = () => {\n    onNavigate('');\n  };\n\n  const handleHome = () => {\n    onNavigate('');\n  };\n\n  return (\n    <div className={`browser-window ${isMaximized ? 'maximized' : ''}`}>\n      {/* Title Bar */}\n      <div className=\"browser-titlebar\">\n        <div className=\"browser-titlebar-text\">\n          <span className=\"browser-icon\">üåê</span>\n          {getSectionTitle(currentSection)}\n        </div>\n        <div className=\"browser-titlebar-controls\">\n          <button\n            className=\"titlebar-button minimize\"\n            aria-label=\"Minimize\"\n            onClick={() => {\n              if (!isMobile) return; // Desktop: do nothing\n              if (isMaximized) {\n                setIsMaximized(false);\n                onClose?.(); // Move to bottom\n              } else if (browserOpen) {\n                onClose?.(); // Move to bottom\n              }\n            }}\n          >\n            _\n          </button>\n          <button\n            className=\"titlebar-button maximize\"\n            aria-label=\"Maximize\"\n            onClick={() => {\n              if (isMobile && !browserOpen) {\n                // Open from bottom first on mobile\n                onOpen?.();\n                setTimeout(() => setIsMaximized(true), 300);\n              } else if (isMobile && isMaximized) {\n                // On mobile, if maximized, restore to open state\n                setIsMaximized(false);\n              } else {\n                // Toggle maximize\n                setIsMaximized(!isMaximized);\n              }\n            }}\n          >\n            ‚ñ°\n          </button>\n          <button\n            className=\"titlebar-button close\"\n            aria-label=\"Close\"\n            onClick={() => {\n              if (!isMobile && !isMaximized) return; // Desktop regular: do nothing\n              if (isMobile) {\n                setIsMaximized(false);\n                onClose?.(); // Always move to bottom on mobile\n              }\n            }}\n          >\n            √ó\n          </button>\n        </div>\n      </div>\n\n      {/* Menu Bar */}\n      <div className=\"browser-menubar\">\n        <span className=\"menu-item\">File</span>\n        <span className=\"menu-item\">Edit</span>\n        <span className=\"menu-item\">View</span>\n        <span className=\"menu-item\">Favorites</span>\n        <span className=\"menu-item\">Tools</span>\n        <span className=\"menu-item\">Help</span>\n      </div>\n\n      {/* Navigation Bar */}\n      <div className=\"browser-navbar\">\n        <div className=\"nav-buttons\">\n          <button\n            className=\"nav-button back\"\n            onClick={handleBack}\n            disabled={currentSection === ''}\n            aria-label=\"Back\"\n          >\n            <BackIcon />\n          </button>\n          <button className=\"nav-button forward\" disabled aria-label=\"Forward\">\n            <ForwardIcon />\n          </button>\n          <button className=\"nav-button refresh\" aria-label=\"Refresh\">\n            <RefreshIcon />\n          </button>\n          <button className=\"nav-button stop\" aria-label=\"Stop\">\n            <StopIcon />\n          </button>\n          <button className=\"nav-button home\" onClick={handleHome} aria-label=\"Home\">\n            <HomeIcon />\n          </button>\n        </div>\n        <div className=\"nav-addressbar\">\n          <input\n            type=\"text\"\n            value={getSectionUrl(currentSection)}\n            readOnly\n            className=\"addressbar-input\"\n          />\n        </div>\n        <button className=\"nav-button go\">Go</button>\n      </div>\n\n      {/* Content Area */}\n      <div className=\"browser-content\">\n        <div className=\"browser-viewport\">{children}</div>\n      </div>\n\n      {/* Status Bar */}\n      <div className=\"browser-statusbar\">\n        <div className=\"status-text\">Done</div>\n        <div className=\"status-icons\">\n          <span className=\"status-icon\">üîí</span>\n          <span className=\"status-zone\">Internet</span>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default BrowserWindow;\n","import React, { useState, lazy, Suspense, useEffect } from 'react';\nimport { ContentProps } from '../../types';\nimport BrowserWindow from './BrowserWindow/BrowserWindow';\n\nimport './Content.css';\n\nconst Avatar = lazy(() => import('./Avatar/Avatar'));\nconst Home = lazy(() => import('./Home/Home'));\nconst AboutMe = lazy(() => import('./AboutMe/AboutMe'));\nconst Work = lazy(() => import('./Work/Work'));\nconst Portfolio = lazy(() => import('./Portfolio/Portfolio'));\nconst Contact = lazy(() => import('./Contact/Contact'));\n\nconst Content: React.FC<ContentProps> = ({ name }) => {\n  const greetings = name !== '' ? `Hello, ${name}!` : 'Hello, fellow traveler of the interwebz!';\n  const [dialogText, setDialogText] = useState<string>(greetings);\n  const [currentAction, setCurrentAction] = useState<string>('');\n  const [browserOpen, setBrowserOpen] = useState<boolean>(false);\n  const [isMobile, setIsMobile] = useState<boolean>(window.innerWidth <= 540);\n  const [pendingBrowserOpen, setPendingBrowserOpen] = useState<boolean>(false);\n\n  useEffect(() => {\n    const handleResize = () => {\n      setIsMobile(window.innerWidth <= 540);\n    };\n    window.addEventListener('resize', handleResize);\n    return () => window.removeEventListener('resize', handleResize);\n  }, []);\n\n  const handleBrowserToggle = () => {\n    setBrowserOpen(!browserOpen);\n  };\n\n  const handleNavigate = (action: string) => {\n    setCurrentAction(action);\n\n    // Only these actions should open the browser\n    const browserActions = ['goTo-about', 'goTo-work', 'goTo-contact', 'goTo-portfolio'];\n\n    if (isMobile && browserActions.includes(action)) {\n      // For navigation actions on mobile, wait for dialog to complete\n      setPendingBrowserOpen(true);\n    }\n    // Other actions (say-hi, say-meow, chatter, etc.) don't open the browser\n  };\n\n  const handleDialogComplete = () => {\n    // Open browser after dialog completes on mobile\n    if (pendingBrowserOpen) {\n      // Add a 1 second delay before opening the browser\n      setTimeout(() => {\n        setBrowserOpen(true);\n        setPendingBrowserOpen(false);\n      }, 1000);\n    }\n  };\n\n  const renderRightSideComponent = () => {\n    const loader = (\n      <div id=\"loader\">\n        <i className=\"spinner icon\"></i>\n      </div>\n    );\n    switch (currentAction) {\n      case 'goTo-about':\n        return (\n          <Suspense fallback={loader}>\n            <AboutMe setDialogText={setDialogText} setCurrentAction={handleNavigate} />\n          </Suspense>\n        );\n      case 'goTo-work':\n        return (\n          <Suspense fallback={loader}>\n            <Work setDialogText={setDialogText} setCurrentAction={handleNavigate} />\n          </Suspense>\n        );\n      case 'goTo-portfolio':\n        return (\n          <Suspense fallback={loader}>\n            <Portfolio setDialogText={setDialogText} setCurrentAction={handleNavigate} />\n          </Suspense>\n        );\n      case 'goTo-contact':\n        return (\n          <Suspense fallback={loader}>\n            <Contact\n              visitor={name}\n              setDialogText={setDialogText}\n              setCurrentAction={handleNavigate}\n            />\n          </Suspense>\n        );\n      default:\n        return (\n          <Suspense fallback={loader}>\n            <Home setDialogText={setDialogText} setCurrentAction={handleNavigate} />\n          </Suspense>\n        );\n    }\n  };\n\n  useEffect(() => {\n    const bgMusic = document.querySelector('#bgMusic') as HTMLAudioElement | null;\n\n    if (bgMusic) {\n      bgMusic.volume = 0.1;\n      bgMusic.play();\n    }\n  }, []);\n\n  return (\n    <Suspense\n      fallback={\n        <div id=\"loader\">\n          <i className=\"spinner icon\"></i>\n        </div>\n      }\n    >\n      <div className=\"ui container main\">\n        <div className=\"ui stackable grid\">\n          <div className=\"seven wide column\">\n            <div className=\"left-side-wrapper\">\n              <Avatar\n                visitor={name}\n                dialogText={dialogText}\n                setDialogText={setDialogText}\n                currentAction={currentAction}\n                setCurrentAction={handleNavigate}\n                onDialogComplete={handleDialogComplete}\n              />\n            </div>\n          </div>\n          <div className={`nine wide column ${browserOpen ? 'browser-open' : ''}`}>\n            <div className=\"right-side-wrapper\">\n              <BrowserWindow\n                currentSection={currentAction}\n                onNavigate={handleNavigate}\n                onClose={isMobile ? handleBrowserToggle : undefined}\n                onOpen={isMobile ? () => setBrowserOpen(true) : undefined}\n                isMobile={isMobile}\n                browserOpen={browserOpen}\n              >\n                {renderRightSideComponent()}\n              </BrowserWindow>\n            </div>\n          </div>\n        </div>\n      </div>\n    </Suspense>\n  );\n};\n\nexport default Content;\n"],"names":["BackIcon","_jsxs","viewBox","width","height","fill","children","_jsx","d","x","y","ForwardIcon","RefreshIcon","stroke","strokeWidth","strokeLinecap","points","StopIcon","HomeIcon","_ref","currentSection","onNavigate","onClose","onOpen","isMobile","browserOpen","isMaximized","setIsMaximized","useState","className","concat","section","onClick","setTimeout","handleBack","disabled","handleHome","type","value","getSectionUrl","readOnly","Avatar","lazy","Home","AboutMe","Work","Portfolio","Contact","name","greetings","dialogText","setDialogText","currentAction","setCurrentAction","setBrowserOpen","setIsMobile","window","innerWidth","pendingBrowserOpen","setPendingBrowserOpen","useEffect","handleResize","addEventListener","removeEventListener","handleNavigate","action","includes","bgMusic","document","querySelector","volume","play","Suspense","fallback","id","visitor","onDialogComplete","handleDialogComplete","BrowserWindow","handleBrowserToggle","undefined","renderRightSideComponent","loader"],"sourceRoot":""}