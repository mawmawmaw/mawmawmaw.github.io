{"version":3,"file":"static/js/420.8bce58e3.chunk.js","mappings":"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","sources":["components/Content/BrowserWindow/BrowserWindow.tsx","components/Content/Games/ui/GameCard.tsx","components/Content/Games/ui/GameOverlay.tsx","components/Content/Games/racing/constants.ts","components/Content/Games/racing/utils/math.ts","components/Content/Games/racing/engine/road.ts","components/Content/Games/racing/engine/physics.ts","components/Content/Games/racing/engine/render.ts","components/Content/Games/racing/engine/gameLoop.ts","utils/functions.ts","components/Content/Games/racing/components/HUD.tsx","components/Content/Games/racing/components/BillboardStats.tsx","components/Content/Games/ui/GameCanvas.tsx","components/Content/Games/ui/GameControls.tsx","components/Content/Games/racing/game.tsx","components/Content/Games/racing/hooks/useCarGame.ts","components/Content/Games/game-selector.tsx","components/Content/Content.tsx","../node_modules/@babel/runtime/helpers/esm/typeof.js","../node_modules/@babel/runtime/helpers/esm/toPropertyKey.js","../node_modules/@babel/runtime/helpers/esm/toPrimitive.js","../node_modules/@babel/runtime/helpers/esm/defineProperty.js","../node_modules/@babel/runtime/helpers/esm/objectSpread2.js"],"sourcesContent":["import React, { useState } from 'react';\nimport './BrowserWindow.css';\n\ninterface BrowserWindowProps {\n  currentSection: string;\n  children: React.ReactNode;\n  onNavigate: (action: string) => void;\n  onClose?: () => void;\n  onOpen?: () => void;\n  isMobile?: boolean;\n  browserOpen?: boolean;\n}\n\n// SVG Icon Components\nconst BackIcon = () => (\n  <svg viewBox=\"0 0 16 16\" width=\"14\" height=\"14\" fill=\"currentColor\">\n    <path d=\"M10 3L5 8l5 5V3z\" />\n    <rect x=\"3\" y=\"7\" width=\"8\" height=\"2\" />\n  </svg>\n);\n\nconst ForwardIcon = () => (\n  <svg viewBox=\"0 0 16 16\" width=\"14\" height=\"14\" fill=\"currentColor\">\n    <path d=\"M6 3l5 5-5 5V3z\" />\n    <rect x=\"5\" y=\"7\" width=\"8\" height=\"2\" />\n  </svg>\n);\n\nconst RefreshIcon = () => (\n  <svg\n    viewBox=\"0 0 16 16\"\n    width=\"14\"\n    height=\"14\"\n    fill=\"none\"\n    stroke=\"currentColor\"\n    strokeWidth=\"1.5\"\n  >\n    <path\n      d=\"M14 8a6 6 0 0 1-6 6 6 6 0 0 1-6-6 6 6 0 0 1 6-6 6 6 0 0 1 5.5 3.5\"\n      strokeLinecap=\"round\"\n    />\n    <polyline points=\"11 2 14 2 14 5\" />\n  </svg>\n);\n\nconst StopIcon = () => (\n  <svg viewBox=\"0 0 16 16\" width=\"14\" height=\"14\" fill=\"currentColor\">\n    <rect x=\"4\" y=\"4\" width=\"8\" height=\"8\" />\n  </svg>\n);\n\nconst HomeIcon = () => (\n  <svg viewBox=\"0 0 16 16\" width=\"14\" height=\"14\" fill=\"currentColor\">\n    <path d=\"M2 8l6-5 6 5v5a1 1 0 0 1-1 1H9v-4H7v4H3a1 1 0 0 1-1-1V8z\" />\n    <polygon points=\"8,1 1,7 2,8 8,3 14,8 15,7\" />\n  </svg>\n);\n\nconst BrowserWindow: React.FC<BrowserWindowProps> = ({\n  currentSection,\n  children,\n  onNavigate,\n  onClose,\n  onOpen,\n  isMobile = false,\n  browserOpen = true,\n}) => {\n  const [isMaximized, setIsMaximized] = useState(false);\n\n  const getSectionUrl = (section: string): string => {\n    const urls: { [key: string]: string } = {\n      '': 'http://maw.dev/index.html',\n      'goTo-about': 'http://maw.dev/about-me.htm',\n      'goTo-work': 'http://maw.dev/work/tech-stack.html',\n      'goTo-portfolio': 'http://maw.dev/portfolio/gallery.cgi',\n      'goTo-contact': 'http://maw.dev/contact/guestbook.php',\n    };\n    return urls[section] || 'http://maw.dev/';\n  };\n\n  const getSectionTitle = (section: string): string => {\n    const titles: { [key: string]: string } = {\n      '': 'Welcome to Maw.dev - Web Explorer',\n      'goTo-about': 'About Me - Web Explorer',\n      'goTo-work': 'Tech Stack - Web Explorer',\n      'goTo-portfolio': 'Portfolio Gallery - Web Explorer',\n      'goTo-contact': 'Contact Form - Web Explorer',\n    };\n    return titles[section] || 'Maw.dev - Web Explorer';\n  };\n\n  const handleBack = () => {\n    onNavigate('');\n  };\n\n  const handleHome = () => {\n    onNavigate('');\n  };\n\n  return (\n    <div className={`browser-window ${isMaximized ? 'maximized' : ''}`}>\n      {/* Title Bar */}\n      <div className=\"browser-titlebar\">\n        <div className=\"browser-titlebar-text\">\n          <span className=\"browser-icon\">🌐</span>\n          {getSectionTitle(currentSection)}\n        </div>\n        <div className=\"browser-titlebar-controls\">\n          <button\n            className=\"titlebar-button minimize\"\n            aria-label=\"Minimize\"\n            onClick={() => {\n              if (!isMobile) return; // Desktop: do nothing\n              if (isMaximized) {\n                setIsMaximized(false);\n                onClose?.(); // Move to bottom\n              } else if (browserOpen) {\n                onClose?.(); // Move to bottom\n              }\n            }}\n          >\n            _\n          </button>\n          <button\n            className=\"titlebar-button maximize\"\n            aria-label=\"Maximize\"\n            onClick={() => {\n              if (isMobile && !browserOpen) {\n                // Open from bottom first on mobile\n                onOpen?.();\n                setTimeout(() => setIsMaximized(true), 300);\n              } else if (isMobile && isMaximized) {\n                // On mobile, if maximized, restore to open state\n                setIsMaximized(false);\n              } else {\n                // Toggle maximize\n                setIsMaximized(!isMaximized);\n              }\n            }}\n          >\n            □\n          </button>\n          <button\n            className=\"titlebar-button close\"\n            aria-label=\"Close\"\n            onClick={() => {\n              if (!isMobile && !isMaximized) return; // Desktop regular: do nothing\n              if (isMobile) {\n                setIsMaximized(false);\n                onClose?.(); // Always move to bottom on mobile\n              }\n            }}\n          >\n            ×\n          </button>\n        </div>\n      </div>\n\n      {/* Menu Bar */}\n      <div className=\"browser-menubar\">\n        <span className=\"menu-item\">File</span>\n        <span className=\"menu-item\">Edit</span>\n        <span className=\"menu-item\">View</span>\n        <span className=\"menu-item\">Favorites</span>\n        <span className=\"menu-item\">Tools</span>\n        <span className=\"menu-item\">Help</span>\n      </div>\n\n      {/* Navigation Bar */}\n      <div className=\"browser-navbar\">\n        <div className=\"nav-buttons\">\n          <button\n            className=\"nav-button back\"\n            onClick={handleBack}\n            disabled={currentSection === ''}\n            aria-label=\"Back\"\n          >\n            <BackIcon />\n          </button>\n          <button className=\"nav-button forward\" disabled aria-label=\"Forward\">\n            <ForwardIcon />\n          </button>\n          <button className=\"nav-button refresh\" aria-label=\"Refresh\">\n            <RefreshIcon />\n          </button>\n          <button className=\"nav-button stop\" aria-label=\"Stop\">\n            <StopIcon />\n          </button>\n          <button className=\"nav-button home\" onClick={handleHome} aria-label=\"Home\">\n            <HomeIcon />\n          </button>\n        </div>\n        <div className=\"nav-addressbar\">\n          <input\n            type=\"text\"\n            value={getSectionUrl(currentSection)}\n            readOnly\n            className=\"addressbar-input\"\n          />\n        </div>\n        <button className=\"nav-button go\">Go</button>\n      </div>\n\n      {/* Content Area */}\n      <div className=\"browser-content\">\n        <div className=\"browser-viewport\">{children}</div>\n      </div>\n\n      {/* Status Bar */}\n      <div className=\"browser-statusbar\">\n        <div className=\"status-text\">Done</div>\n        <div className=\"status-icons\">\n          <span className=\"status-icon\">🔒</span>\n          <span className=\"status-zone\">Internet</span>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default BrowserWindow;\n","import React from 'react';\n\ninterface GameCardProps {\n  title: string;\n  icon?: string;\n  color?: string;\n  gradientFrom?: string;\n  gradientTo?: string;\n  onClick: () => void;\n  description?: string;\n  disabled?: boolean;\n}\n\nexport const GameCard: React.FC<GameCardProps> = ({\n  title,\n  icon,\n  color,\n  gradientFrom,\n  gradientTo,\n  onClick,\n  description,\n  disabled = false,\n}) => {\n  const bgStyle =\n    gradientFrom && gradientTo\n      ? {\n          background: `linear-gradient(135deg, ${gradientFrom} 0%, ${gradientTo} 100%)`,\n        }\n      : { backgroundColor: color || '#4b5563' };\n\n  return (\n    <button onClick={onClick} disabled={disabled} className=\"game-card\" style={bgStyle}>\n      {/* Hover Overlay */}\n      <div className=\"game-card-overlay\" />\n\n      {/* Content */}\n      <div className=\"game-card-content\">\n        {/* Icon */}\n        {icon && <div className=\"game-card-icon\">{icon}</div>}\n\n        {/* Title */}\n        <h3 className=\"game-card-title\">{title}</h3>\n\n        {/* Description */}\n        {description && <p className=\"game-card-description\">{description}</p>}\n      </div>\n\n      {/* Corner Accent */}\n      <div className=\"game-card-accent-top\">\n        <div className=\"game-card-accent-triangle\" />\n      </div>\n\n      {/* Bottom Accent */}\n      <div className=\"game-card-accent-bottom\" />\n    </button>\n  );\n};\n","import React, { useEffect, useState } from 'react';\n\ninterface GameOverlayProps {\n  type: 'start' | 'pause' | 'gameOver' | 'levelComplete' | 'custom';\n  title?: string;\n  message?: string;\n  score?: number;\n  level?: number;\n  brandColor?: string;\n  onAction?: () => void;\n  actionText?: string;\n  customContent?: React.ReactNode;\n  showPressToStart?: boolean;\n}\n\nexport const GameOverlay: React.FC<GameOverlayProps> = ({\n  type,\n  title,\n  message,\n  score,\n  level,\n  brandColor = '#00d26a',\n  onAction,\n  actionText,\n  customContent,\n  showPressToStart = true,\n}) => {\n  const [showBlink, setShowBlink] = useState(true);\n\n  useEffect(() => {\n    if (showPressToStart && type === 'start') {\n      const interval = setInterval(() => {\n        setShowBlink((prev) => !prev);\n      }, 500);\n      return () => clearInterval(interval);\n    }\n  }, [showPressToStart, type]);\n\n  const defaultTitles = {\n    start: '🎮 LISTO PARA JUGAR',\n    pause: '⏸️ PAUSA',\n    gameOver: '🥳 GAME OVER',\n    levelComplete: '🎉 ¡NIVEL COMPLETADO!',\n    custom: '',\n  };\n\n  const displayTitle = title || defaultTitles[type];\n\n  return (\n    <div className=\"game-overlay\">\n      {/* Background Overlay */}\n      <div className=\"game-overlay-bg\" />\n\n      {/* Content Card */}\n      <div className=\"game-overlay-card\">\n        {/* Decorative Border Glow */}\n        <div className=\"game-overlay-glow\" style={{ backgroundColor: brandColor }} />\n\n        <div className=\"game-overlay-content\">\n          {/* Title */}\n          {displayTitle && <h2 className=\"game-overlay-title\">{displayTitle}</h2>}\n\n          {/* Score Display */}\n          {score !== undefined && (\n            <div className=\"game-overlay-score\">\n              <p className=\"game-overlay-score-label\">Puntuación Final</p>\n              <p className=\"game-overlay-score-value\">{score.toLocaleString()}</p>\n            </div>\n          )}\n\n          {/* Level Display */}\n          {level !== undefined && type === 'levelComplete' && (\n            <div className=\"game-overlay-level\">\n              <p className=\"game-overlay-level-label\">Nivel</p>\n              <p className=\"game-overlay-level-value\">{level}</p>\n            </div>\n          )}\n\n          {/* Custom Message */}\n          {message && <p className=\"game-overlay-message\">{message}</p>}\n\n          {/* Custom Content */}\n          {customContent}\n\n          {/* Action Button or Press to Start */}\n          {type === 'start' && showPressToStart && !onAction ? (\n            <p\n              className=\"game-overlay-blink\"\n              style={{ color: brandColor, opacity: showBlink ? 1 : 0 }}\n            >\n              PRESIONA ESPACIO PARA COMENZAR\n            </p>\n          ) : onAction && actionText ? (\n            <button\n              onClick={onAction}\n              className=\"game-overlay-button\"\n              style={{\n                backgroundColor: brandColor,\n              }}\n            >\n              {actionText}\n            </button>\n          ) : null}\n        </div>\n      </div>\n    </div>\n  );\n};\n","/**\n * Key codes for input handling\n */\nexport const KEY = {\n  LEFT: 37,\n  UP: 38,\n  RIGHT: 39,\n  DOWN: 40,\n  A: 65,\n  D: 68,\n  S: 83,\n  W: 87,\n  SPACE: 32,\n};\n\n/**\n * Road configuration constants\n */\nexport const ROAD = {\n  LENGTH: {\n    NONE: 0,\n    SHORT: 25,\n    MEDIUM: 50,\n    LONG: 100,\n  },\n  HILL: {\n    NONE: 0,\n    LOW: 20,\n    MEDIUM: 40,\n    HIGH: 60,\n  },\n  CURVE: {\n    NONE: 0,\n    EASY: 2,\n    MEDIUM: 4,\n    HARD: 6,\n  },\n};\n\n/**\n * Game colors\n */\nexport const COLORS = {\n  SKY: '#72D7EE',\n  TREE: '#005108',\n  FOG: '#005108',\n  LIGHT: {\n    road: '#6B6B6B',\n    grass: '#10AA10',\n    rumble: '#555555',\n    lane: '#CCCCCC',\n  },\n  DARK: {\n    road: '#696969',\n    grass: '#009A00',\n    rumble: '#BBBBBB',\n  },\n  START: {\n    road: 'white',\n    grass: 'white',\n    rumble: 'white',\n  },\n  FINISH: {\n    road: 'black',\n    grass: 'black',\n    rumble: 'black',\n  },\n};\n\n/**\n * Background layer configuration\n */\nexport const BACKGROUND = {\n  HILLS: { x: 5, y: 5, w: 1280, h: 480 },\n  SKY: { x: 5, y: 495, w: 1280, h: 480 },\n  TREES: { x: 5, y: 985, w: 1280, h: 480 },\n};\n\n/**\n * Sprite definitions\n */\nconst SPRITES_DEF = {\n  PALM_TREE: { x: 5, y: 5, w: 215, h: 540 },\n  BILLBOARD08: { x: 230, y: 5, w: 385, h: 265 },\n  TREE1: { x: 625, y: 5, w: 360, h: 360 },\n  DEAD_TREE1: { x: 5, y: 555, w: 135, h: 332 },\n  BILLBOARD09: { x: 150, y: 555, w: 328, h: 282 },\n  BOULDER3: { x: 230, y: 280, w: 320, h: 220 },\n  COLUMN: { x: 995, y: 5, w: 200, h: 315 },\n  BILLBOARD01: { x: 625, y: 375, w: 300, h: 170 },\n  BILLBOARD06: { x: 488, y: 555, w: 298, h: 190 },\n  BILLBOARD05: { x: 5, y: 897, w: 298, h: 190 },\n  BILLBOARD07: { x: 313, y: 897, w: 298, h: 190 },\n  BOULDER2: { x: 621, y: 897, w: 298, h: 140 },\n  TREE2: { x: 1205, y: 5, w: 282, h: 295 },\n  BILLBOARD04: { x: 1205, y: 310, w: 268, h: 170 },\n  DEAD_TREE2: { x: 1205, y: 490, w: 150, h: 260 },\n  BOULDER1: { x: 1205, y: 760, w: 168, h: 248 },\n  BUSH1: { x: 5, y: 1097, w: 240, h: 155 },\n  CACTUS: { x: 929, y: 897, w: 235, h: 118 },\n  BUSH2: { x: 255, y: 1097, w: 232, h: 152 },\n  BILLBOARD03: { x: 5, y: 1262, w: 230, h: 220 },\n  BILLBOARD02: { x: 245, y: 1262, w: 215, h: 220 },\n  STUMP: { x: 995, y: 330, w: 195, h: 140 },\n  SEMI: { x: 1365, y: 490, w: 122, h: 144 },\n  TRUCK: { x: 1365, y: 644, w: 100, h: 78 },\n  CAR03: { x: 1383, y: 760, w: 88, h: 55 },\n  CAR02: { x: 1383, y: 825, w: 80, h: 59 },\n  CAR04: { x: 1383, y: 894, w: 80, h: 57 },\n  CAR01: { x: 1205, y: 1018, w: 80, h: 56 },\n  PLAYER_UPHILL_LEFT: { x: 1383, y: 961, w: 80, h: 45 },\n  PLAYER_UPHILL_STRAIGHT: { x: 1295, y: 1018, w: 80, h: 45 },\n  PLAYER_UPHILL_RIGHT: { x: 1385, y: 1018, w: 80, h: 45 },\n  PLAYER_RIGHT: { x: 995, y: 480, w: 80, h: 41 },\n  PLAYER_STRAIGHT: { x: 1085, y: 480, w: 80, h: 41 },\n  PLAYER_LEFT: { x: 995, y: 531, w: 80, h: 41 },\n  COIN: { x: 1395, y: 1092, w: 60, h: 60 },\n};\n\n// Add computed properties\nconst SPRITES_COMPUTED = {\n  ...SPRITES_DEF,\n  SCALE: 0.3 * (1 / SPRITES_DEF.PLAYER_STRAIGHT.w),\n  BILLBOARDS: [\n    SPRITES_DEF.BILLBOARD01,\n    SPRITES_DEF.BILLBOARD02,\n    SPRITES_DEF.BILLBOARD03,\n    SPRITES_DEF.BILLBOARD04,\n    SPRITES_DEF.BILLBOARD05,\n    SPRITES_DEF.BILLBOARD06,\n    SPRITES_DEF.BILLBOARD07,\n    SPRITES_DEF.BILLBOARD08,\n    SPRITES_DEF.BILLBOARD09,\n  ],\n  PLANTS: [\n    SPRITES_DEF.TREE1,\n    SPRITES_DEF.TREE2,\n    SPRITES_DEF.DEAD_TREE1,\n    SPRITES_DEF.DEAD_TREE2,\n    SPRITES_DEF.PALM_TREE,\n    SPRITES_DEF.BUSH1,\n    SPRITES_DEF.BUSH2,\n    SPRITES_DEF.CACTUS,\n    SPRITES_DEF.STUMP,\n    SPRITES_DEF.BOULDER1,\n    SPRITES_DEF.BOULDER2,\n    SPRITES_DEF.BOULDER3,\n  ],\n  CARS: [\n    SPRITES_DEF.CAR01,\n    SPRITES_DEF.CAR02,\n    SPRITES_DEF.CAR03,\n    SPRITES_DEF.CAR04,\n    SPRITES_DEF.SEMI,\n    SPRITES_DEF.TRUCK,\n  ],\n} as const;\n\nexport const SPRITES = SPRITES_COMPUTED;\n\n/**\n * Default game configuration\n */\nexport const DEFAULT_CONFIG = {\n  fps: 60,\n  width: 720,\n  height: 960,\n  roadWidth: 2000,\n  segmentLength: 200,\n  rumbleLength: 3,\n  lanes: 3,\n  fieldOfView: 100,\n  cameraHeight: 1000,\n  drawDistance: 300,\n  fogDensity: 5,\n  centrifugal: 0.3,\n  skySpeed: 0.001,\n  hillSpeed: 0.002,\n  treeSpeed: 0.003,\n  totalCars: 200,\n};\n","/**\n * Math utilities for 3D car racing game\n * Optimized for performance in game loop\n */\n\nexport class MathUtils {\n  /**\n   * Get current timestamp\n   */\n  static timestamp(): number {\n    return performance.now();\n  }\n\n  /**\n   * Convert to integer with default value\n   */\n  static toInt(obj: any, def: number = 0): number {\n    if (obj !== null && obj !== undefined) {\n      const x = parseInt(obj, 10);\n      if (!isNaN(x)) return x;\n    }\n    return def;\n  }\n\n  /**\n   * Convert to float with default value\n   */\n  static toFloat(obj: any, def: number = 0.0): number {\n    if (obj !== null && obj !== undefined) {\n      const x = parseFloat(obj);\n      if (!isNaN(x)) return x;\n    }\n    return def;\n  }\n\n  /**\n   * Clamp value between min and max\n   */\n  static limit(value: number, min: number, max: number): number {\n    return Math.max(min, Math.min(value, max));\n  }\n\n  /**\n   * Get random integer between min and max (inclusive)\n   */\n  static randomInt(min: number, max: number): number {\n    return Math.round(this.interpolate(min, max, Math.random()));\n  }\n\n  /**\n   * Get random choice from array\n   */\n  static randomChoice<T>(options: T[]): T {\n    return options[this.randomInt(0, options.length - 1)];\n  }\n\n  /**\n   * Calculate percent remaining\n   */\n  static percentRemaining(n: number, total: number): number {\n    return (n % total) / total;\n  }\n\n  /**\n   * Accelerate value\n   */\n  static accelerate(v: number, accel: number, dt: number): number {\n    return v + accel * dt;\n  }\n\n  /**\n   * Linear interpolation\n   */\n  static interpolate(a: number, b: number, percent: number): number {\n    return a + (b - a) * percent;\n  }\n\n  /**\n   * Ease in interpolation\n   */\n  static easeIn(a: number, b: number, percent: number): number {\n    return a + (b - a) * Math.pow(percent, 2);\n  }\n\n  /**\n   * Ease out interpolation\n   */\n  static easeOut(a: number, b: number, percent: number): number {\n    return a + (b - a) * (1 - Math.pow(1 - percent, 2));\n  }\n\n  /**\n   * Ease in-out interpolation\n   */\n  static easeInOut(a: number, b: number, percent: number): number {\n    return a + (b - a) * (-Math.cos(percent * Math.PI) / 2 + 0.5);\n  }\n\n  /**\n   * Exponential fog calculation\n   */\n  static exponentialFog(distance: number, density: number): number {\n    return 1 / Math.pow(Math.E, distance * distance * density);\n  }\n\n  /**\n   * Increase value with wrapping\n   */\n  static increase(start: number, increment: number, max: number): number {\n    let result = start + increment;\n    while (result >= max) result -= max;\n    while (result < 0) result += max;\n    return result;\n  }\n\n  /**\n   * Check overlap between two objects\n   * Optimized version with early exit\n   */\n  static overlap(x1: number, w1: number, x2: number, w2: number, percent: number = 1): boolean {\n    const half1 = percent * 0.5;\n    const half2 = percent * 0.5;\n    const min1 = x1 - w1 * half1;\n    const max1 = x1 + w1 * half1;\n    const min2 = x2 - w2 * half2;\n    const max2 = x2 + w2 * half2;\n    return !(max1 < min2 || min1 > max2);\n  }\n\n  /**\n   * Project 3D point to 2D screen\n   * Optimized for performance\n   */\n  static project(\n    p: {\n      world: { x?: number; y?: number; z?: number };\n      camera: { x?: number; y?: number; z?: number };\n      screen: { x?: number; y?: number; w?: number; scale?: number };\n    },\n    cameraX: number,\n    cameraY: number,\n    cameraZ: number,\n    cameraDepth: number,\n    width: number,\n    height: number,\n    roadWidth: number\n  ): void {\n    p.camera.x = (p.world.x || 0) - cameraX;\n    p.camera.y = (p.world.y || 0) - cameraY;\n    p.camera.z = (p.world.z || 0) - cameraZ;\n    p.screen.scale = cameraDepth / p.camera.z;\n    p.screen.x = Math.round(width / 2 + (p.screen.scale * p.camera.x * width) / 2);\n    p.screen.y = Math.round(height / 2 - (p.screen.scale * p.camera.y * height) / 2);\n    p.screen.w = Math.round((p.screen.scale * roadWidth * width) / 2);\n  }\n}\n\n// Pre-calculated values for performance\nexport const DEG_TO_RAD = Math.PI / 180;\nexport const RAD_TO_DEG = 180 / Math.PI;\n\n/**\n * Fast sine approximation for non-critical calculations\n */\nexport function fastSin(x: number): number {\n  x = x % (2 * Math.PI);\n  if (x < 0) x += 2 * Math.PI;\n\n  if (x < Math.PI) {\n    return (4 * x * (Math.PI - x)) / (Math.PI * Math.PI);\n  } else {\n    x -= Math.PI;\n    return (-4 * x * (Math.PI - x)) / (Math.PI * Math.PI);\n  }\n}\n\n/**\n * Fast cosine approximation for non-critical calculations\n */\nexport function fastCos(x: number): number {\n  return fastSin(x + Math.PI / 2);\n}\n","import type { RoadSegment, Car, Sprite } from '../types';\nimport { COLORS, SPRITES, ROAD } from '../constants';\nimport { MathUtils } from '../utils/math';\n\n/**\n * Road generation and management system\n * Optimized for performance and memory usage\n */\nexport class RoadEngine {\n  private segments: RoadSegment[] = [];\n  private segmentLength: number;\n  private rumbleLength: number;\n  private trackLength: number = 0;\n  private billboardPlacements: Map<string, number> = new Map();\n  private billboardImpressions: Map<string, number> = new Map();\n  private billboardInstances: Map<\n    string,\n    { segmentIndex: number; offset: number; seenInLaps: Set<number> }[]\n  > = new Map();\n  private nextBillboardId: number = 0;\n\n  constructor(segmentLength: number = 200, rumbleLength: number = 3) {\n    this.segmentLength = segmentLength;\n    this.rumbleLength = rumbleLength;\n  }\n\n  /**\n   * Get all road segments\n   */\n  getSegments(): RoadSegment[] {\n    return this.segments;\n  }\n\n  /**\n   * Get track length\n   */\n  getTrackLength(): number {\n    return this.trackLength;\n  }\n\n  /**\n   * Get billboard placements count\n   */\n  getBillboardPlacements(): Map<string, number> {\n    return new Map(this.billboardPlacements);\n  }\n\n  /**\n   * Get billboard impressions count\n   */\n  getBillboardImpressions(): Map<string, number> {\n    return new Map(this.billboardImpressions);\n  }\n\n  /**\n   * Record billboard impression for a specific segment and offset in a specific lap\n   */\n  recordBillboardImpression(\n    segmentIndex: number,\n    offset: number,\n    billboardName: string,\n    currentLap: number\n  ): void {\n    const instances = this.billboardInstances.get(billboardName);\n    if (!instances) return;\n\n    // Find the specific billboard instance at this segment and offset\n    const instance = instances.find(\n      (inst) => inst.segmentIndex === segmentIndex && Math.abs(inst.offset - offset) < 0.1 // Small tolerance for floating point comparison\n    );\n\n    if (instance && !instance.seenInLaps.has(currentLap)) {\n      instance.seenInLaps.add(currentLap);\n      const current = this.billboardImpressions.get(billboardName) || 0;\n      this.billboardImpressions.set(billboardName, current + 1);\n    }\n  }\n\n  /**\n   * Get billboard statistics as an object\n   */\n  getBillboardStats(totalLaps: number): {\n    placements: Record<string, number>;\n    impressions: Record<string, number>;\n    maxPossibleImpressions: Record<string, number>;\n    trackLength: number;\n    totalSegments: number;\n    totalLaps: number;\n  } {\n    const placements: Record<string, number> = {};\n    const impressions: Record<string, number> = {};\n    const maxPossibleImpressions: Record<string, number> = {};\n\n    this.billboardPlacements.forEach((count, name) => {\n      placements[name] = count;\n      maxPossibleImpressions[name] = count * totalLaps;\n    });\n\n    this.billboardImpressions.forEach((count, name) => {\n      impressions[name] = count;\n    });\n\n    // Calculate a realistic track length in meters\n    // Game units don't correspond to real meters, so we apply a scale factor\n    // Adjusted for actual segment counts (typically 3000-6000 segments)\n    // Target track lengths: 2-4 km for realistic racing circuits\n    const realisticTrackLength = Math.round(this.segments.length * 0.65);\n\n    return {\n      placements,\n      impressions,\n      maxPossibleImpressions,\n      trackLength: realisticTrackLength,\n      totalSegments: this.segments.length,\n      totalLaps,\n    };\n  }\n\n  /**\n   * Find segment by Z position\n   */\n  findSegment(z: number): RoadSegment {\n    return this.segments[Math.floor(z / this.segmentLength) % this.segments.length];\n  }\n\n  /**\n   * Get last Y position\n   */\n  private lastY(): number {\n    return this.segments.length === 0 ? 0 : this.segments[this.segments.length - 1].p2.world.y;\n  }\n\n  /**\n   * Add a road segment\n   */\n  private addSegment(curve: number, y: number): void {\n    const n = this.segments.length;\n    this.segments.push({\n      index: n,\n      p1: {\n        world: { y: this.lastY(), z: n * this.segmentLength },\n        camera: { x: 0, y: 0, z: 0 },\n        screen: { x: 0, y: 0, w: 0, scale: 0 },\n      },\n      p2: {\n        world: { y: y, z: (n + 1) * this.segmentLength },\n        camera: { x: 0, y: 0, z: 0 },\n        screen: { x: 0, y: 0, w: 0, scale: 0 },\n      },\n      curve: curve,\n      sprites: [],\n      cars: [],\n      color: Math.floor(n / this.rumbleLength) % 2 ? COLORS.DARK : COLORS.LIGHT,\n    });\n  }\n\n  /**\n   * Add a sprite to a segment\n   */\n  private addSprite(n: number, sprite: Sprite, offset: number): void {\n    if (this.segments[n]) {\n      const spriteInstance = { source: sprite, offset: offset };\n\n      // If it's a billboard, track it with a unique ID\n      const billboardName = this.getBillboardName(sprite);\n      if (billboardName) {\n        const billboardId = `${billboardName}_${this.nextBillboardId++}`;\n        // Store the billboard ID in the sprite instance for later reference\n        (spriteInstance as any).billboardId = billboardId;\n\n        // Track the instance\n        if (!this.billboardInstances.has(billboardName)) {\n          this.billboardInstances.set(billboardName, []);\n        }\n        this.billboardInstances.get(billboardName)!.push({\n          segmentIndex: n,\n          offset: offset,\n          seenInLaps: new Set<number>(),\n        });\n      }\n\n      this.segments[n].sprites.push(spriteInstance);\n    }\n  }\n\n  /**\n   * Add a road section with easing\n   */\n  private addRoad(enter: number, hold: number, leave: number, curve: number, y: number): void {\n    const startY = this.lastY();\n    const endY = startY + MathUtils.toInt(y, 0) * this.segmentLength;\n    const total = enter + hold + leave;\n\n    // Enter phase with easing\n    for (let n = 0; n < enter; n++) {\n      this.addSegment(\n        MathUtils.easeIn(0, curve, n / enter),\n        MathUtils.easeInOut(startY, endY, n / total)\n      );\n    }\n\n    // Hold phase\n    for (let n = 0; n < hold; n++) {\n      this.addSegment(curve, MathUtils.easeInOut(startY, endY, (enter + n) / total));\n    }\n\n    // Leave phase with easing\n    for (let n = 0; n < leave; n++) {\n      this.addSegment(\n        MathUtils.easeInOut(curve, 0, n / leave),\n        MathUtils.easeInOut(startY, endY, (enter + hold + n) / total)\n      );\n    }\n  }\n\n  /**\n   * Add straight road section\n   */\n  private addStraight(num: number = ROAD.LENGTH.MEDIUM): void {\n    this.addRoad(num, num, num, 0, 0);\n  }\n\n  /**\n   * Add hill section\n   */\n  private addHill(num: number = ROAD.LENGTH.MEDIUM, height: number = ROAD.HILL.MEDIUM): void {\n    this.addRoad(num, num, num, 0, height);\n  }\n\n  /**\n   * Add curve section\n   */\n  private addCurve(\n    num: number = ROAD.LENGTH.MEDIUM,\n    curve: number = ROAD.CURVE.MEDIUM,\n    height: number = ROAD.HILL.NONE\n  ): void {\n    this.addRoad(num, num, num, curve, height);\n  }\n\n  /**\n   * Add rolling hills section\n   */\n  private addLowRollingHills(\n    num: number = ROAD.LENGTH.SHORT,\n    height: number = ROAD.HILL.LOW\n  ): void {\n    this.addRoad(num, num, num, 0, height / 2);\n    this.addRoad(num, num, num, 0, -height);\n    this.addRoad(num, num, num, ROAD.CURVE.EASY, height);\n    this.addRoad(num, num, num, 0, 0);\n    this.addRoad(num, num, num, -ROAD.CURVE.EASY, height / 2);\n    this.addRoad(num, num, num, 0, 0);\n  }\n\n  /**\n   * Add S-curves section\n   */\n  private addSCurves(): void {\n    this.addRoad(\n      ROAD.LENGTH.MEDIUM,\n      ROAD.LENGTH.MEDIUM,\n      ROAD.LENGTH.MEDIUM,\n      -ROAD.CURVE.EASY,\n      ROAD.HILL.NONE\n    );\n    this.addRoad(\n      ROAD.LENGTH.MEDIUM,\n      ROAD.LENGTH.MEDIUM,\n      ROAD.LENGTH.MEDIUM,\n      ROAD.CURVE.MEDIUM,\n      ROAD.HILL.MEDIUM\n    );\n    this.addRoad(\n      ROAD.LENGTH.MEDIUM,\n      ROAD.LENGTH.MEDIUM,\n      ROAD.LENGTH.MEDIUM,\n      ROAD.CURVE.EASY,\n      -ROAD.HILL.LOW\n    );\n    this.addRoad(\n      ROAD.LENGTH.MEDIUM,\n      ROAD.LENGTH.MEDIUM,\n      ROAD.LENGTH.MEDIUM,\n      -ROAD.CURVE.EASY,\n      ROAD.HILL.MEDIUM\n    );\n    this.addRoad(\n      ROAD.LENGTH.MEDIUM,\n      ROAD.LENGTH.MEDIUM,\n      ROAD.LENGTH.MEDIUM,\n      -ROAD.CURVE.MEDIUM,\n      -ROAD.HILL.MEDIUM\n    );\n  }\n\n  /**\n   * Add bumps section\n   */\n  private addBumps(): void {\n    this.addRoad(10, 10, 10, 0, 5);\n    this.addRoad(10, 10, 10, 0, -2);\n    this.addRoad(10, 10, 10, 0, -5);\n    this.addRoad(10, 10, 10, 0, 8);\n    this.addRoad(10, 10, 10, 0, 5);\n    this.addRoad(10, 10, 10, 0, -7);\n    this.addRoad(10, 10, 10, 0, 5);\n    this.addRoad(10, 10, 10, 0, -2);\n  }\n\n  /**\n   * Add downhill to end section\n   */\n  private addDownhillToEnd(num: number = 200): void {\n    this.addRoad(num, num, num, -ROAD.CURVE.EASY, -this.lastY() / this.segmentLength);\n  }\n\n  /**\n   * Reset and rebuild road\n   */\n  reset(track: number = 0, playerZ: number): void {\n    this.segments = [];\n\n    // Build track based on track number\n    switch (track) {\n      case 1: // Speed Circuit - Fast track with long straights\n        this.addStraight(ROAD.LENGTH.LONG);\n        this.addCurve(ROAD.LENGTH.SHORT, ROAD.CURVE.EASY, ROAD.HILL.NONE);\n        this.addStraight(ROAD.LENGTH.LONG * 2);\n        this.addCurve(ROAD.LENGTH.SHORT, -ROAD.CURVE.EASY, ROAD.HILL.NONE);\n        this.addStraight(ROAD.LENGTH.LONG);\n        this.addHill(ROAD.LENGTH.MEDIUM, ROAD.HILL.LOW);\n        this.addStraight(ROAD.LENGTH.LONG);\n        this.addCurve(ROAD.LENGTH.MEDIUM, ROAD.CURVE.MEDIUM, ROAD.HILL.NONE);\n        this.addStraight(ROAD.LENGTH.LONG * 2);\n        this.addCurve(ROAD.LENGTH.SHORT, -ROAD.CURVE.HARD, ROAD.HILL.NONE);\n        this.addStraight(ROAD.LENGTH.MEDIUM);\n        this.addDownhillToEnd();\n        break;\n\n      case 2: // Mountain Pass - Challenging hills and curves\n        this.addHill(ROAD.LENGTH.SHORT, ROAD.HILL.MEDIUM);\n        this.addCurve(ROAD.LENGTH.MEDIUM, ROAD.CURVE.HARD, ROAD.HILL.HIGH);\n        this.addHill(ROAD.LENGTH.LONG, -ROAD.HILL.MEDIUM);\n        this.addSCurves();\n        this.addHill(ROAD.LENGTH.MEDIUM, ROAD.HILL.HIGH);\n        this.addCurve(ROAD.LENGTH.LONG, -ROAD.CURVE.MEDIUM, -ROAD.HILL.LOW);\n        this.addBumps();\n        this.addHill(ROAD.LENGTH.LONG, ROAD.HILL.MEDIUM);\n        this.addCurve(ROAD.LENGTH.MEDIUM, ROAD.CURVE.EASY, -ROAD.HILL.HIGH);\n        this.addSCurves();\n        this.addHill(ROAD.LENGTH.SHORT, -ROAD.HILL.MEDIUM);\n        this.addDownhillToEnd();\n        break;\n\n      case 3: // Technical Circuit - Lots of curves\n        this.addStraight(ROAD.LENGTH.SHORT);\n        this.addSCurves();\n        this.addCurve(ROAD.LENGTH.MEDIUM, ROAD.CURVE.HARD, ROAD.HILL.NONE);\n        this.addCurve(ROAD.LENGTH.MEDIUM, -ROAD.CURVE.HARD, ROAD.HILL.NONE);\n        this.addSCurves();\n        this.addCurve(ROAD.LENGTH.SHORT, ROAD.CURVE.EASY, ROAD.HILL.LOW);\n        this.addCurve(ROAD.LENGTH.SHORT, -ROAD.CURVE.EASY, -ROAD.HILL.LOW);\n        this.addBumps();\n        this.addSCurves();\n        this.addCurve(ROAD.LENGTH.LONG, ROAD.CURVE.MEDIUM, ROAD.HILL.MEDIUM);\n        this.addStraight(ROAD.LENGTH.SHORT);\n        this.addSCurves();\n        this.addDownhillToEnd();\n        break;\n\n      default: // Track 0 - Original balanced track\n        this.addStraight(ROAD.LENGTH.SHORT);\n        this.addLowRollingHills();\n        this.addSCurves();\n        this.addCurve(ROAD.LENGTH.MEDIUM, ROAD.CURVE.MEDIUM, ROAD.HILL.LOW);\n        this.addBumps();\n        this.addLowRollingHills();\n        this.addCurve(ROAD.LENGTH.LONG * 2, ROAD.CURVE.MEDIUM, ROAD.HILL.MEDIUM);\n        this.addStraight();\n        this.addHill(ROAD.LENGTH.MEDIUM, ROAD.HILL.HIGH);\n        this.addSCurves();\n        this.addCurve(ROAD.LENGTH.LONG, -ROAD.CURVE.MEDIUM, ROAD.HILL.NONE);\n        this.addHill(ROAD.LENGTH.LONG, ROAD.HILL.HIGH);\n        this.addCurve(ROAD.LENGTH.LONG, ROAD.CURVE.MEDIUM, -ROAD.HILL.LOW);\n        this.addBumps();\n        this.addHill(ROAD.LENGTH.LONG, -ROAD.HILL.MEDIUM);\n        this.addStraight();\n        this.addSCurves();\n        this.addDownhillToEnd();\n    }\n\n    this.resetSprites();\n\n    // Mark start and finish lines\n    const playerSegment = this.findSegment(playerZ);\n    this.segments[playerSegment.index + 2].color = COLORS.START;\n    this.segments[playerSegment.index + 3].color = COLORS.START;\n\n    for (let n = 0; n < this.rumbleLength; n++) {\n      this.segments[this.segments.length - 1 - n].color = COLORS.FINISH;\n    }\n\n    this.trackLength = this.segments.length * this.segmentLength;\n  }\n\n  /**\n   * Reset sprites on the track\n   */\n  private resetSprites(): void {\n    // Clear billboard tracking\n    this.billboardPlacements.clear();\n    this.billboardImpressions.clear();\n    this.billboardInstances.clear();\n    this.nextBillboardId = 0;\n\n    // Add billboards and plants randomly\n    for (let n = 20; n < this.segments.length - 50; n += 60) {\n      const billboard = MathUtils.randomChoice([...SPRITES.BILLBOARDS]);\n      const billboardName = this.getBillboardName(billboard);\n\n      // Track billboard placement\n      if (billboardName) {\n        const current = this.billboardPlacements.get(billboardName) || 0;\n        this.billboardPlacements.set(billboardName, current + 1);\n      }\n\n      this.addSprite(\n        n + MathUtils.randomInt(0, 50),\n        billboard,\n        MathUtils.randomChoice([1, -1, 1.1, -1.1, 1.2, -1.2])\n      );\n\n      for (let i = 0; i < 20; i++) {\n        this.addSprite(\n          n + MathUtils.randomInt(0, 50),\n          MathUtils.randomChoice([...SPRITES.PLANTS]),\n          MathUtils.randomChoice([1.1, -1.1]) * (1 + Math.random())\n        );\n      }\n    }\n\n    // Add plants along the track\n    for (let n = 10; n < this.segments.length; n += 3 + Math.floor(n / 100)) {\n      this.addSprite(\n        n,\n        MathUtils.randomChoice([...SPRITES.PLANTS]),\n        MathUtils.randomChoice([1, -1]) * (1 + Math.random() * 5)\n      );\n    }\n\n    // Add columns randomly\n    for (let n = 120; n < this.segments.length; n += 30 + Math.floor(n / 20)) {\n      this.addSprite(n, SPRITES.COLUMN, MathUtils.randomChoice([1, -1]) * (1 + Math.random() * 5));\n    }\n\n    // Add coins in lanes\n    const LANE_POSITIONS = [-0.5, 0, 0.5];\n    for (let n = 0; n < this.segments.length; n += 30) {\n      this.addSprite(n, SPRITES.COIN, MathUtils.randomChoice(LANE_POSITIONS));\n    }\n  }\n\n  /**\n   * Remove all coins from the track\n   */\n  removeAllCoins(): void {\n    for (const segment of this.segments) {\n      segment.sprites = segment.sprites.filter((sprite) => sprite.source !== SPRITES.COIN);\n    }\n  }\n\n  /**\n   * Reset cars on the track\n   */\n  resetCars(totalCars: number, maxSpeed: number): Car[] {\n    // Clear existing cars from segments\n    for (const segment of this.segments) {\n      segment.cars = [];\n    }\n\n    const cars: Car[] = [];\n\n    for (let n = 0; n < totalCars; n++) {\n      const offset = Math.random() * MathUtils.randomChoice([-0.8, 0.8]);\n      const z = Math.floor(Math.random() * this.segments.length) * this.segmentLength;\n      const sprite = MathUtils.randomChoice([...SPRITES.CARS]);\n      const speed = maxSpeed / 4 + (Math.random() * maxSpeed) / (sprite === SPRITES.SEMI ? 4 : 2);\n\n      const car: Car = {\n        offset,\n        z,\n        sprite,\n        speed,\n        percent: MathUtils.percentRemaining(z, this.segmentLength),\n      };\n      const segment = this.findSegment(car.z);\n      segment.cars.push(car);\n      cars.push(car);\n    }\n\n    return cars;\n  }\n\n  /**\n   * Get billboard name from sprite object\n   */\n  getBillboardName(sprite: Sprite): string | null {\n    // Check each billboard sprite to find which one matches\n    if (sprite === SPRITES.BILLBOARD01) return 'BILLBOARD01';\n    if (sprite === SPRITES.BILLBOARD02) return 'BILLBOARD02';\n    if (sprite === SPRITES.BILLBOARD03) return 'BILLBOARD03';\n    if (sprite === SPRITES.BILLBOARD04) return 'BILLBOARD04';\n    if (sprite === SPRITES.BILLBOARD05) return 'BILLBOARD05';\n    if (sprite === SPRITES.BILLBOARD06) return 'BILLBOARD06';\n    if (sprite === SPRITES.BILLBOARD07) return 'BILLBOARD07';\n    if (sprite === SPRITES.BILLBOARD08) return 'BILLBOARD08';\n    if (sprite === SPRITES.BILLBOARD09) return 'BILLBOARD09';\n    return null;\n  }\n}\n","import type { Car, RoadSegment, InputState } from '../types';\nimport { SPRITES } from '../constants';\nimport { MathUtils } from '../utils/math';\n\n/**\n * Physics and collision engine for 3D car racing game\n * Optimized for performance with spatial optimizations\n */\nexport class PhysicsEngine {\n  private maxSpeed: number;\n  private accel: number;\n  private breaking: number;\n  private decel: number;\n  private offRoadDecel: number;\n  private offRoadLimit: number;\n  private centrifugal: number;\n  private trackLength: number;\n\n  constructor(config: {\n    maxSpeed: number;\n    accel: number;\n    breaking: number;\n    decel: number;\n    offRoadDecel: number;\n    offRoadLimit: number;\n    centrifugal: number;\n    trackLength: number;\n  }) {\n    this.maxSpeed = config.maxSpeed;\n    this.accel = config.accel;\n    this.breaking = config.breaking;\n    this.decel = config.decel;\n    this.offRoadDecel = config.offRoadDecel;\n    this.offRoadLimit = config.offRoadLimit;\n    this.centrifugal = config.centrifugal;\n    this.trackLength = config.trackLength;\n  }\n\n  /**\n   * Update track length\n   */\n  updateTrackLength(trackLength: number): void {\n    this.trackLength = trackLength;\n  }\n\n  /**\n   * Update player physics\n   */\n  updatePlayer(\n    playerX: number,\n    speed: number,\n    position: number,\n    inputState: InputState,\n    playerSegment: RoadSegment,\n    dt: number,\n    _findSegment: (z: number) => RoadSegment,\n    //roadWidth: number = 2000,\n    canvasWidth: number = 720,\n    canvasHeight: number = 960\n  ): {\n    playerX: number;\n    speed: number;\n    position: number;\n    pointsEarned: number;\n    crashed: boolean;\n    coinCollected?: { x: number; y: number };\n    crashPosition?: { x: number; y: number };\n  } {\n    const playerW = SPRITES.PLAYER_STRAIGHT.w * SPRITES.SCALE;\n    const speedPercent = speed / this.maxSpeed;\n    const dx = dt * 2 * speedPercent;\n    let pointsEarned = 0;\n    let crashed = false;\n\n    // Handle movement\n    if (inputState.left) {\n      playerX = playerX - dx;\n    } else if (inputState.right) {\n      playerX = playerX + dx;\n    }\n\n    // Apply centrifugal force\n    playerX = playerX - dx * speedPercent * playerSegment.curve * this.centrifugal;\n\n    // Handle acceleration/deceleration\n    if (inputState.faster) {\n      speed = MathUtils.accelerate(speed, this.accel, dt);\n    } else if (inputState.slower) {\n      speed = MathUtils.accelerate(speed, this.breaking, dt);\n    } else {\n      speed = MathUtils.accelerate(speed, this.decel, dt);\n    }\n\n    // Handle off-road physics and sprite collisions\n    if (playerX < -1 || playerX > 1) {\n      if (speed > this.offRoadLimit) {\n        speed = MathUtils.accelerate(speed, this.offRoadDecel, dt);\n      }\n\n      // Check sprite collisions\n      for (const sprite of playerSegment.sprites) {\n        const spriteW = sprite.source.w * SPRITES.SCALE;\n        if (\n          MathUtils.overlap(\n            playerX,\n            playerW,\n            sprite.offset + (spriteW / 2) * (sprite.offset > 0 ? 1 : -1),\n            spriteW\n          )\n        ) {\n          speed = this.maxSpeed / 5;\n          position = MathUtils.increase(playerSegment.p1.world.z, -playerW, this.trackLength);\n          break;\n        }\n      }\n    }\n\n    // Handle coin collection\n    let coinCollected: { x: number; y: number } | undefined;\n    for (let i = playerSegment.sprites.length - 1; i >= 0; i--) {\n      const sprite = playerSegment.sprites[i];\n      if (sprite.source === SPRITES.COIN) {\n        const coinW = sprite.source.w * SPRITES.SCALE;\n        if (\n          MathUtils.overlap(\n            playerX,\n            playerW,\n            sprite.offset + (coinW / 10) * (sprite.offset > 0 ? 1 : -1),\n            coinW\n          )\n        ) {\n          // Store coin position for animation\n          // Since we're in the physics update, screen coordinates might not be available\n          // We'll use a simple approximation based on player position\n          coinCollected = {\n            x: canvasWidth / 2 + sprite.offset * canvasWidth * 0.3, // Approximate screen position\n            y: canvasHeight / 2 - 100, // Slightly above center\n          };\n          // Remove coin\n          playerSegment.sprites.splice(i, 1);\n          // Award points based on speed\n          pointsEarned = Math.round(speed / 1000);\n        }\n      }\n    }\n\n    // Handle car collisions\n    let crashPosition: { x: number; y: number } | undefined;\n    for (const car of playerSegment.cars) {\n      const carW = car.sprite.w * SPRITES.SCALE;\n      if (speed > car.speed) {\n        if (MathUtils.overlap(playerX, playerW, car.offset, carW, 0.6)) {\n          speed = car.speed * (car.speed / speed);\n          position = MathUtils.increase(car.z, -playerW, this.trackLength);\n          pointsEarned = -3; // Crash penalty\n          crashed = true;\n          // Store crash position for animation\n          crashPosition = {\n            x: canvasWidth / 2 + car.offset * canvasWidth * 0.3, // Approximate position of collision\n            y: canvasHeight / 2 - 50, // Slightly above center\n          };\n          break;\n        }\n      }\n    }\n\n    // Clamp values\n    playerX = MathUtils.limit(playerX, -3, 3);\n    speed = MathUtils.limit(speed, 0, this.maxSpeed);\n\n    return {\n      playerX,\n      speed,\n      position,\n      pointsEarned,\n      crashed,\n      coinCollected,\n      crashPosition,\n    };\n  }\n\n  /**\n   * Update all cars with optimized AI\n   */\n  updateCars(\n    cars: Car[],\n    dt: number,\n    playerSegment: RoadSegment,\n    playerX: number,\n    playerSpeed: number,\n    drawDistance: number,\n    findSegment: (z: number) => RoadSegment,\n    segments: RoadSegment[]\n  ): void {\n    const playerW = SPRITES.PLAYER_STRAIGHT.w * SPRITES.SCALE;\n\n    for (const car of cars) {\n      const oldSegment = findSegment(car.z);\n\n      // Update car position\n      car.z = MathUtils.increase(car.z, dt * car.speed, this.trackLength);\n      car.percent = MathUtils.percentRemaining(car.z, 200); // segmentLength\n\n      // Update car offset (AI steering)\n      car.offset += this.updateCarOffset(\n        car,\n        oldSegment,\n        playerSegment,\n        playerW,\n        playerX,\n        playerSpeed,\n        drawDistance,\n        segments\n      );\n\n      // Move car to new segment if needed\n      const newSegment = findSegment(car.z);\n      if (oldSegment !== newSegment) {\n        const index = oldSegment.cars.indexOf(car);\n        if (index !== -1) {\n          oldSegment.cars.splice(index, 1);\n          newSegment.cars.push(car);\n        }\n      }\n    }\n  }\n\n  /**\n   * Calculate car AI steering offset\n   */\n  private updateCarOffset(\n    car: Car,\n    carSegment: RoadSegment,\n    playerSegment: RoadSegment,\n    playerW: number,\n    playerX: number,\n    playerSpeed: number,\n    drawDistance: number,\n    segments: RoadSegment[]\n  ): number {\n    const lookahead = 20;\n    const carW = car.sprite.w * SPRITES.SCALE;\n\n    // Optimization: don't calculate AI for cars far from player\n    if (carSegment.index - playerSegment.index > drawDistance) {\n      return 0;\n    }\n\n    // Look ahead for obstacles\n    for (let i = 1; i < lookahead; i++) {\n      const segment = segments[(carSegment.index + i) % segments.length];\n\n      // Avoid player\n      if (\n        segment === playerSegment &&\n        car.speed > playerSpeed &&\n        MathUtils.overlap(playerX, playerW, car.offset, carW, 1.2)\n      ) {\n        const dir = this.calculateAvoidanceDirection(playerX, car.offset);\n        return (((dir * 1) / i) * (car.speed - playerSpeed)) / this.maxSpeed;\n      }\n\n      // Avoid other cars\n      for (const otherCar of segment.cars) {\n        const otherCarW = otherCar.sprite.w * SPRITES.SCALE;\n        if (\n          car.speed > otherCar.speed &&\n          MathUtils.overlap(car.offset, carW, otherCar.offset, otherCarW, 1.2)\n        ) {\n          const dir = this.calculateAvoidanceDirection(otherCar.offset, car.offset);\n          return (((dir * 1) / i) * (car.speed - otherCar.speed)) / this.maxSpeed;\n        }\n      }\n    }\n\n    // Return to road if off-road\n    if (car.offset < -0.9) return 0.1;\n    else if (car.offset > 0.9) return -0.1;\n    else return 0;\n  }\n\n  /**\n   * Calculate direction to avoid obstacle\n   */\n  private calculateAvoidanceDirection(obstacleX: number, carX: number): number {\n    if (obstacleX > 0.5) return -1;\n    else if (obstacleX < -0.5) return 1;\n    else return carX > obstacleX ? 1 : -1;\n  }\n\n  /**\n   * Update background scroll offsets\n   */\n  updateScrollOffsets(\n    skyOffset: number,\n    hillOffset: number,\n    treeOffset: number,\n    playerSegment: RoadSegment,\n    startPosition: number,\n    position: number,\n    segmentLength: number,\n    skySpeed: number,\n    hillSpeed: number,\n    treeSpeed: number\n  ): { skyOffset: number; hillOffset: number; treeOffset: number } {\n    const deltaPosition = position - startPosition;\n\n    skyOffset = MathUtils.increase(\n      skyOffset,\n      (skySpeed * playerSegment.curve * deltaPosition) / segmentLength,\n      1\n    );\n    hillOffset = MathUtils.increase(\n      hillOffset,\n      (hillSpeed * playerSegment.curve * deltaPosition) / segmentLength,\n      1\n    );\n    treeOffset = MathUtils.increase(\n      treeOffset,\n      (treeSpeed * playerSegment.curve * deltaPosition) / segmentLength,\n      1\n    );\n\n    return { skyOffset, hillOffset, treeOffset };\n  }\n}\n","import type { Sprite, BackgroundLayer, RoadSegment, CoinAnimation, CrashAnimation } from '../types';\nimport { COLORS, SPRITES } from '../constants';\nimport { MathUtils } from '../utils/math';\n\n/**\n * Optimized rendering engine for 3D car racing game\n */\nexport class RenderEngine {\n  private ctx: CanvasRenderingContext2D;\n  private width: number;\n  private height: number;\n  public resolution: number;\n  private cameraDepth: number = 0.84; // Default camera depth\n\n  constructor(ctx: CanvasRenderingContext2D, width: number, height: number) {\n    this.ctx = ctx;\n    this.width = width;\n    this.height = height;\n    this.resolution = height / 480;\n  }\n\n  /**\n   * Set camera depth for visibility calculations\n   */\n  setCameraDepth(depth: number): void {\n    this.cameraDepth = depth;\n  }\n\n  /**\n   * Update canvas dimensions\n   */\n  updateDimensions(width: number, height: number): void {\n    this.width = width;\n    this.height = height;\n    this.resolution = height / 480;\n  }\n\n  /**\n   * Clear the canvas\n   */\n  clear(): void {\n    this.ctx.clearRect(0, 0, this.width, this.height);\n  }\n\n  /**\n   * Draw a polygon\n   * Optimized to reduce canvas state changes\n   */\n  private polygon(\n    x1: number,\n    y1: number,\n    x2: number,\n    y2: number,\n    x3: number,\n    y3: number,\n    x4: number,\n    y4: number,\n    color: string\n  ): void {\n    this.ctx.fillStyle = color;\n    this.ctx.beginPath();\n    this.ctx.moveTo(x1, y1);\n    this.ctx.lineTo(x2, y2);\n    this.ctx.lineTo(x3, y3);\n    this.ctx.lineTo(x4, y4);\n    this.ctx.closePath();\n    this.ctx.fill();\n  }\n\n  /**\n   * Draw a road segment\n   */\n  segment(\n    lanes: number,\n    x1: number,\n    y1: number,\n    w1: number,\n    x2: number,\n    y2: number,\n    w2: number,\n    fog: number,\n    color: any\n  ): void {\n    const r1 = this.rumbleWidth(w1, lanes);\n    const r2 = this.rumbleWidth(w2, lanes);\n    const l1 = this.laneMarkerWidth(w1, lanes);\n    const l2 = this.laneMarkerWidth(w2, lanes);\n\n    // Grass\n    this.ctx.fillStyle = color.grass;\n    this.ctx.fillRect(0, y2, this.width, y1 - y2);\n\n    // Rumble strips\n    this.polygon(x1 - w1 - r1, y1, x1 - w1, y1, x2 - w2, y2, x2 - w2 - r2, y2, color.rumble);\n    this.polygon(x1 + w1 + r1, y1, x1 + w1, y1, x2 + w2, y2, x2 + w2 + r2, y2, color.rumble);\n\n    // Road\n    this.polygon(x1 - w1, y1, x1 + w1, y1, x2 + w2, y2, x2 - w2, y2, color.road);\n\n    // Lane markers\n    if (color.lane) {\n      const lanew1 = (w1 * 2) / lanes;\n      const lanew2 = (w2 * 2) / lanes;\n      let lanex1 = x1 - w1 + lanew1;\n      let lanex2 = x2 - w2 + lanew2;\n\n      for (let lane = 1; lane < lanes; lane++) {\n        this.polygon(\n          lanex1 - l1 / 2,\n          y1,\n          lanex1 + l1 / 2,\n          y1,\n          lanex2 + l2 / 2,\n          y2,\n          lanex2 - l2 / 2,\n          y2,\n          color.lane\n        );\n        lanex1 += lanew1;\n        lanex2 += lanew2;\n      }\n    }\n\n    // Fog\n    this.fog(0, y1, this.width, y2 - y1, fog);\n  }\n\n  /**\n   * Draw background layer\n   * Optimized for seamless scrolling\n   */\n  background(\n    background: HTMLImageElement,\n    layer: BackgroundLayer,\n    rotation: number,\n    offset: number\n  ): void {\n    rotation = rotation || 0;\n    offset = offset || 0;\n\n    const imageW = layer.w / 2;\n    const imageH = layer.h;\n\n    const sourceX = layer.x + (Math.floor(layer.w * rotation) % layer.w);\n    const sourceY = layer.y;\n    const sourceW = Math.min(imageW, layer.w - (sourceX - layer.x));\n    const sourceH = imageH;\n\n    const destX = 0;\n    const destY = Math.floor(offset);\n    const destW = Math.floor(this.width * (sourceW / imageW));\n    const destH = this.height;\n\n    // Draw main portion\n    this.ctx.drawImage(background, sourceX, sourceY, sourceW, sourceH, destX, destY, destW, destH);\n\n    // Draw wrapped portion for seamless scrolling\n    if (sourceW < imageW) {\n      this.ctx.drawImage(\n        background,\n        layer.x,\n        sourceY,\n        imageW - sourceW,\n        sourceH,\n        destW - 1,\n        destY,\n        this.width - destW,\n        destH\n      );\n    }\n  }\n\n  /**\n   * Draw a sprite\n   * Optimized with clipping support\n   */\n  sprite(\n    roadWidth: number,\n    sprites: HTMLImageElement,\n    sprite: Sprite,\n    scale: number,\n    destX: number,\n    destY: number,\n    offsetX: number = 0,\n    offsetY: number = 0,\n    clipY?: number\n  ): void {\n    const destW = ((sprite.w * scale * this.width) / 2) * (SPRITES.SCALE * roadWidth);\n    const destH = ((sprite.h * scale * this.width) / 2) * (SPRITES.SCALE * roadWidth);\n\n    destX = destX + destW * offsetX;\n    destY = destY + destH * offsetY;\n\n    const clipH = clipY ? Math.max(0, destY + destH - clipY) : 0;\n\n    if (clipH < destH) {\n      this.ctx.drawImage(\n        sprites,\n        sprite.x,\n        sprite.y,\n        sprite.w,\n        sprite.h - (sprite.h * clipH) / destH,\n        destX,\n        destY,\n        destW,\n        destH - clipH\n      );\n    }\n  }\n\n  /**\n   * Draw the player car\n   * Includes bounce effect based on speed\n   */\n  player(\n    roadWidth: number,\n    sprites: HTMLImageElement,\n    speedPercent: number,\n    scale: number,\n    destX: number,\n    destY: number,\n    steer: number,\n    updown: number\n  ): void {\n    const bounce =\n      1.5 * Math.random() * speedPercent * this.resolution * MathUtils.randomChoice([-1, 1]);\n\n    let sprite: Sprite;\n    if (steer < 0) {\n      sprite = updown > 0 ? SPRITES.PLAYER_UPHILL_LEFT : SPRITES.PLAYER_LEFT;\n    } else if (steer > 0) {\n      sprite = updown > 0 ? SPRITES.PLAYER_UPHILL_RIGHT : SPRITES.PLAYER_RIGHT;\n    } else {\n      sprite = updown > 0 ? SPRITES.PLAYER_UPHILL_STRAIGHT : SPRITES.PLAYER_STRAIGHT;\n    }\n\n    this.sprite(roadWidth, sprites, sprite, scale, destX, destY + bounce, -0.5, -1);\n  }\n\n  /**\n   * Draw fog effect\n   * Optimized to skip when fog is minimal\n   */\n  private fog(x: number, y: number, width: number, height: number, fog: number): void {\n    if (fog < 1 && fog > 0.01) {\n      this.ctx.globalAlpha = 1 - fog;\n      this.ctx.fillStyle = COLORS.FOG;\n      this.ctx.fillRect(x, y, width, height);\n      this.ctx.globalAlpha = 1;\n    }\n  }\n\n  /**\n   * Calculate rumble width\n   */\n  private rumbleWidth(projectedRoadWidth: number, lanes: number): number {\n    return projectedRoadWidth / Math.max(6, 2 * lanes);\n  }\n\n  /**\n   * Calculate lane marker width\n   */\n  private laneMarkerWidth(projectedRoadWidth: number, lanes: number): number {\n    return projectedRoadWidth / Math.max(32, 8 * lanes);\n  }\n\n  /**\n   * Batch render cars for performance\n   */\n  renderCars(\n    segments: RoadSegment[],\n    baseSegmentIndex: number,\n    drawDistance: number,\n    roadWidth: number,\n    sprites: HTMLImageElement\n  ): void {\n    // Render from back to front\n    for (let n = drawDistance - 1; n > 0; n--) {\n      const segment = segments[(baseSegmentIndex + n) % segments.length];\n\n      for (const car of segment.cars) {\n        const spriteScale = MathUtils.interpolate(\n          segment.p1.screen.scale,\n          segment.p2.screen.scale,\n          car.percent || 0\n        );\n        const spriteX =\n          MathUtils.interpolate(segment.p1.screen.x, segment.p2.screen.x, car.percent || 0) +\n          (spriteScale * car.offset * roadWidth * this.width) / 2;\n        const spriteY = MathUtils.interpolate(\n          segment.p1.screen.y,\n          segment.p2.screen.y,\n          car.percent || 0\n        );\n\n        this.sprite(\n          roadWidth,\n          sprites,\n          car.sprite,\n          spriteScale,\n          spriteX,\n          spriteY,\n          -0.5,\n          -1,\n          segment.clip\n        );\n      }\n    }\n  }\n\n  /**\n   * Batch render sprites for performance\n   */\n  renderSprites(\n    segments: RoadSegment[],\n    baseSegmentIndex: number,\n    drawDistance: number,\n    roadWidth: number,\n    sprites: HTMLImageElement\n  ): void {\n    // Render from back to front\n    for (let n = drawDistance - 1; n > 0; n--) {\n      const segment = segments[(baseSegmentIndex + n) % segments.length];\n\n      for (const sprite of segment.sprites) {\n        const spriteScale = segment.p1.screen.scale;\n        const spriteX =\n          segment.p1.screen.x + (spriteScale * sprite.offset * roadWidth * this.width) / 2;\n        const spriteY = segment.p1.screen.y;\n\n        this.sprite(\n          roadWidth,\n          sprites,\n          sprite.source,\n          spriteScale,\n          spriteX,\n          spriteY,\n          sprite.offset < 0 ? -1 : 0,\n          -1,\n          segment.clip\n        );\n      }\n    }\n  }\n\n  /**\n   * Render all objects (sprites and cars) in correct z-order\n   */\n  renderObjects(\n    segments: RoadSegment[],\n    baseSegmentIndex: number,\n    drawDistance: number,\n    roadWidth: number,\n    sprites: HTMLImageElement,\n    onBillboardRender?: (sprite: Sprite, segmentIndex: number, offset: number) => void\n  ): void {\n    // Render from back to front\n    for (let n = drawDistance - 1; n > 0; n--) {\n      const segment = segments[(baseSegmentIndex + n) % segments.length];\n\n      // Render sprites first (they are at the segment start position)\n      for (const sprite of segment.sprites) {\n        const spriteScale = segment.p1.screen.scale;\n        const spriteX =\n          segment.p1.screen.x + (spriteScale * sprite.offset * roadWidth * this.width) / 2;\n        const spriteY = segment.p1.screen.y;\n\n        // Check if sprite is visible (not clipped and within screen bounds)\n        if (segment.clip && segment.p1.camera.z > this.cameraDepth && spriteY < segment.clip) {\n          // Notify about billboard render if callback provided\n          if (onBillboardRender) {\n            onBillboardRender(sprite.source, segment.index, sprite.offset);\n          }\n        }\n\n        this.sprite(\n          roadWidth,\n          sprites,\n          sprite.source,\n          spriteScale,\n          spriteX,\n          spriteY,\n          sprite.offset < 0 ? -1 : 0,\n          -1,\n          segment.clip\n        );\n      }\n\n      // Then render cars (they can be anywhere within the segment)\n      for (const car of segment.cars) {\n        const spriteScale = MathUtils.interpolate(\n          segment.p1.screen.scale,\n          segment.p2.screen.scale,\n          car.percent || 0\n        );\n        const spriteX =\n          MathUtils.interpolate(segment.p1.screen.x, segment.p2.screen.x, car.percent || 0) +\n          (spriteScale * car.offset * roadWidth * this.width) / 2;\n        const spriteY = MathUtils.interpolate(\n          segment.p1.screen.y,\n          segment.p2.screen.y,\n          car.percent || 0\n        );\n\n        this.sprite(\n          roadWidth,\n          sprites,\n          car.sprite,\n          spriteScale,\n          spriteX,\n          spriteY,\n          -0.5,\n          -1,\n          segment.clip\n        );\n      }\n    }\n  }\n\n  /**\n   * Render coin collection animations\n   */\n  renderCoinAnimations(animations: CoinAnimation[], currentTime: number): void {\n    const ctx = this.ctx;\n    ctx.save();\n\n    for (const anim of animations) {\n      const elapsed = currentTime - anim.startTime;\n      const progress = Math.min(elapsed / 500, 1); // 0.5 second animation\n\n      if (progress >= 1) continue;\n\n      // Fade out effect\n      const alpha = 1 - progress;\n\n      // Particle burst effect\n      const particleCount = 6;\n      const particleRadius = 3;\n      const burstRadius = 50 * progress;\n\n      ctx.globalAlpha = alpha * 0.8;\n      ctx.fillStyle = '#FFD700'; // Gold color\n\n      for (let i = 0; i < particleCount; i++) {\n        const angle = (i / particleCount) * Math.PI * 2;\n        const x = anim.x + Math.cos(angle) * burstRadius;\n        const y = anim.y + Math.sin(angle) * burstRadius;\n\n        ctx.beginPath();\n        ctx.arc(x, y, particleRadius, 0, Math.PI * 2);\n        ctx.fill();\n      }\n\n      // \"+X puntos\" text\n      ctx.globalAlpha = alpha;\n      ctx.font = 'bold 24px Arial';\n      ctx.fillStyle = '#FFD700';\n      ctx.strokeStyle = '#000000';\n      ctx.lineWidth = 3;\n\n      const text = `+${anim.points} puntos`;\n      const textY = anim.y - 30 * progress; // Float upward\n\n      ctx.strokeText(text, anim.x - 40, textY);\n      ctx.fillText(text, anim.x - 40, textY);\n    }\n\n    ctx.restore();\n  }\n\n  /**\n   * Render crash/collision animations\n   */\n  renderCrashAnimations(animations: CrashAnimation[], currentTime: number): void {\n    const ctx = this.ctx;\n    ctx.save();\n\n    for (const anim of animations) {\n      const elapsed = currentTime - anim.startTime;\n      const progress = Math.min(elapsed / 500, 1); // 0.5 second animation\n\n      if (progress >= 1) continue;\n\n      // Shake effect\n      const shakeX = (Math.random() - 0.5) * 10 * (1 - progress);\n      const shakeY = (Math.random() - 0.5) * 10 * (1 - progress);\n\n      // Fade out effect\n      const alpha = 1 - progress;\n\n      // Red explosion particles\n      const particleCount = 8;\n      const particleRadius = 4;\n      const burstRadius = 60 * progress;\n\n      ctx.globalAlpha = alpha * 0.9;\n\n      for (let i = 0; i < particleCount; i++) {\n        const angle = (i / particleCount) * Math.PI * 2;\n        const x = anim.x + Math.cos(angle) * burstRadius + shakeX;\n        const y = anim.y + Math.sin(angle) * burstRadius + shakeY;\n\n        // Red to orange gradient\n        const color = i % 2 === 0 ? '#FF0000' : '#FF6600';\n        ctx.fillStyle = color;\n\n        ctx.beginPath();\n        ctx.arc(x, y, particleRadius * (1 - progress * 0.5), 0, Math.PI * 2);\n        ctx.fill();\n      }\n\n      // \"-3 puntos\" text with shake\n      ctx.globalAlpha = alpha;\n      ctx.font = 'bold 28px Arial';\n      ctx.fillStyle = '#FF0000';\n      ctx.strokeStyle = '#000000';\n      ctx.lineWidth = 4;\n\n      const text = '-3 puntos';\n      const textX = anim.x - 50 + shakeX;\n      const textY = anim.y - 20 * progress + shakeY; // Float upward\n\n      ctx.strokeText(text, textX, textY);\n      ctx.fillText(text, textX, textY);\n\n      // Impact flash effect\n      if (progress < 0.1) {\n        ctx.globalAlpha = (1 - progress * 10) * 0.5;\n        ctx.fillStyle = '#FFFFFF';\n        ctx.beginPath();\n        ctx.arc(anim.x, anim.y, 50, 0, Math.PI * 2);\n        ctx.fill();\n      }\n    }\n\n    ctx.restore();\n  }\n}\n","import { MathUtils } from '../utils/math';\n\n/**\n * Optimized game loop with fixed timestep and frame rate management\n */\nexport class GameLoop {\n  private isRunning = false;\n  private animationFrameId: number | null = null;\n  private lastTimestamp = 0;\n  private accumulator = 0;\n  private readonly targetFps: number;\n  private readonly fixedTimeStep: number;\n  private readonly maxFrameTime: number;\n\n  // Performance monitoring\n  private frameCount = 0;\n  private lastFpsUpdate = 0;\n  private currentFps = 0;\n\n  constructor(\n    private update: (dt: number) => void,\n    private render: (interpolation: number) => void,\n    fps: number = 60\n  ) {\n    this.targetFps = fps;\n    this.fixedTimeStep = 1 / fps;\n    this.maxFrameTime = this.fixedTimeStep * 5; // Prevent spiral of death\n  }\n\n  /**\n   * Start the game loop\n   */\n  start(): void {\n    if (this.isRunning) return;\n\n    this.isRunning = true;\n    this.lastTimestamp = MathUtils.timestamp();\n    this.accumulator = 0;\n    this.loop();\n  }\n\n  /**\n   * Stop the game loop\n   */\n  stop(): void {\n    this.isRunning = false;\n    if (this.animationFrameId !== null) {\n      cancelAnimationFrame(this.animationFrameId);\n      this.animationFrameId = null;\n    }\n  }\n\n  /**\n   * Get current FPS\n   */\n  getFps(): number {\n    return this.currentFps;\n  }\n\n  /**\n   * Main game loop with fixed timestep\n   */\n  private loop = (): void => {\n    if (!this.isRunning) return;\n\n    const currentTime = MathUtils.timestamp();\n    let frameTime = (currentTime - this.lastTimestamp) / 1000;\n\n    // Prevent spiral of death by capping frame time\n    frameTime = Math.min(frameTime, this.maxFrameTime);\n    this.lastTimestamp = currentTime;\n    this.accumulator += frameTime;\n\n    // Fixed timestep updates\n    while (this.accumulator >= this.fixedTimeStep) {\n      this.update(this.fixedTimeStep);\n      this.accumulator -= this.fixedTimeStep;\n    }\n\n    // Calculate interpolation for smooth rendering\n    const interpolation = this.accumulator / this.fixedTimeStep;\n\n    // Render with interpolation\n    this.render(interpolation);\n\n    // Update FPS counter\n    this.updateFpsCounter();\n\n    // Schedule next frame\n    this.animationFrameId = requestAnimationFrame(this.loop);\n  };\n\n  /**\n   * Update FPS counter\n   */\n  private updateFpsCounter(): void {\n    this.frameCount++;\n    const now = MathUtils.timestamp();\n\n    if (now - this.lastFpsUpdate >= 1000) {\n      this.currentFps = Math.round((this.frameCount * 1000) / (now - this.lastFpsUpdate));\n      this.frameCount = 0;\n      this.lastFpsUpdate = now;\n    }\n  }\n}\n\n/**\n * Image loader utility for game assets\n */\nexport class ImageLoader {\n  /**\n   * Load multiple images and return them when all are loaded\n   */\n  static async loadImages(\n    names: string[],\n    basePath: string,\n    skin: string = 'default'\n  ): Promise<HTMLImageElement[]> {\n    const promises = names.map((name) => this.loadSingleImage(name, basePath, skin));\n    return Promise.all(promises);\n  }\n\n  /**\n   * Load a single image\n   */\n  private static loadSingleImage(\n    name: string,\n    basePath: string,\n    skin: string\n  ): Promise<HTMLImageElement> {\n    return new Promise((resolve, reject) => {\n      const img = new Image();\n      img.onload = () => resolve(img);\n      img.onerror = () => reject(new Error(`Failed to load image: ${name}`));\n\n      if (skin === 'default') {\n        img.src = `${basePath}/${name}.webp`;\n      } else {\n        img.src = `${basePath}/skins/${skin}/${name}.webp`;\n      }\n    });\n  }\n}\n\n/**\n * Input manager for keyboard and touch events\n */\nexport class InputManager {\n  private keys: { [key: number]: boolean } = {};\n  private keyHandlers: Array<{\n    keys: number[];\n    mode: 'up' | 'down';\n    action: () => void;\n  }> = [];\n\n  constructor() {\n    this.setupKeyboardListeners();\n  }\n\n  /**\n   * Setup keyboard event listeners\n   */\n  private setupKeyboardListeners(): void {\n    document.addEventListener('keydown', this.handleKeyDown);\n    document.addEventListener('keyup', this.handleKeyUp);\n  }\n\n  /**\n   * Cleanup event listeners\n   */\n  destroy(): void {\n    document.removeEventListener('keydown', this.handleKeyDown);\n    document.removeEventListener('keyup', this.handleKeyUp);\n  }\n\n  /**\n   * Register key handlers\n   */\n  setKeyHandlers(\n    handlers: Array<{\n      keys: number[];\n      mode: 'up' | 'down';\n      action: () => void;\n    }>\n  ): void {\n    this.keyHandlers = handlers;\n  }\n\n  /**\n   * Check if key is pressed\n   */\n  isKeyPressed(keyCode: number): boolean {\n    return this.keys[keyCode] || false;\n  }\n\n  /**\n   * Handle key down events\n   */\n  private handleKeyDown = (event: KeyboardEvent): void => {\n    this.keys[event.keyCode] = true;\n    this.triggerKeyHandlers(event.keyCode, 'down');\n\n    // Prevent default for game keys\n    const gameKeys = [37, 38, 39, 40]; // Arrow keys\n    if (gameKeys.includes(event.keyCode)) {\n      event.preventDefault();\n    }\n  };\n\n  /**\n   * Handle key up events\n   */\n  private handleKeyUp = (event: KeyboardEvent): void => {\n    this.keys[event.keyCode] = false;\n    this.triggerKeyHandlers(event.keyCode, 'up');\n  };\n\n  /**\n   * Trigger registered key handlers\n   */\n  private triggerKeyHandlers(keyCode: number, mode: 'up' | 'down'): void {\n    for (const handler of this.keyHandlers) {\n      if (handler.mode === mode && handler.keys.includes(keyCode)) {\n        handler.action();\n      }\n    }\n  }\n\n  /**\n   * Setup touch controls for mobile\n   */\n  setupTouchControls(_isMobile: boolean): void {\n    // Touch controls are now handled directly through the game component\n    // This method is kept for compatibility but doesn't need to do anything\n  }\n\n  /**\n   * Get key code for touch direction\n   */\n  private getKeyCodeForDirection(direction: string): number {\n    switch (direction) {\n      case 'left':\n        return 37;\n      case 'up':\n        return 38;\n      case 'right':\n        return 39;\n      case 'down':\n        return 40;\n      default:\n        return 0;\n    }\n  }\n}\n","//Funcion para determinar si el usuario esta en un dispositivo movil\nexport const isMobile = () => {\n  if (typeof window !== 'undefined') {\n    const isMobileUserAgent = /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(\n      navigator.userAgent\n    );\n    const isMobileWidth = window.matchMedia('only screen and (max-width: 768px)').matches;\n    const moreThanOneTouchPoint = navigator.maxTouchPoints > 1; //cuantos puntos de contacto tiene el dispositivo\n    return isMobileWidth && isMobileUserAgent && moreThanOneTouchPoint;\n  }\n  return false;\n};\n","import React from 'react';\nimport type { HudState } from '../types';\n\ninterface HUDProps {\n  currentLap: number;\n  availableLaps: number;\n  points: number;\n  hud: HudState;\n  gameState: 'playing' | 'paused' | 'gameover' | 'loading' | 'ready';\n}\n\nexport const HUD: React.FC<HUDProps> = ({ currentLap, availableLaps, points, hud, gameState }) => {\n  /**\n   * Calculate speedometer rotation\n   */\n  const getSpeedometerRotation = () => {\n    const speed = parseInt(hud.speed || '0') || 0;\n    // Rotate needle between -90 and 90 degrees based on speed\n    return (speed / 100) * 180 - 90;\n  };\n\n  if (gameState !== 'playing' && gameState !== 'paused' && gameState !== 'loading') {\n    return null;\n  }\n\n  return (\n    <>\n      {/* Top HUD */}\n      <div className=\"hud-top\">\n        {/* Lap Counter */}\n        <span className=\"hud-lap-counter\">\n          <img className=\"hud-lap-icon\" src=\"/games/racing/images/flag-laps.webp\" alt=\"laps\" />\n          <span className=\"hud-lap-text\">\n            {currentLap}/{availableLaps}\n          </span>\n        </span>\n\n        {/* Lap Time */}\n        <span className=\"hud-time\">\n          <img className=\"hud-lap-icon\" src=\"/games/racing/images/cronometer.webp\" alt=\"time\" />\n          <span className=\"hud-lap-text\">{hud.current_lap_time}</span>\n        </span>\n\n        {/* Points */}\n        <span className=\"hud-score\">\n          <img className=\"hud-lap-icon\" src=\"/games/racing/images/coin.webp\" alt=\"points\" />\n          <span className=\"hud-score-value\">{points}</span>\n        </span>\n      </div>\n\n      {/* Bottom HUD - Speedometer */}\n      <div className=\"hud-bottom\">\n        <div className=\"hud-speed\">\n          <svg className=\"hud-speedometer\" viewBox=\"0 0 200 200\">\n            {/* Background circle */}\n            <circle cx=\"100\" cy=\"100\" r=\"90\" fill=\"none\" stroke=\"#444\" strokeWidth=\"2\" />\n            {/* Speedometer arc */}\n            <path d=\"M 30 170 A 85 85 0 0 1 170 170\" fill=\"none\" stroke=\"#888\" strokeWidth=\"8\" />\n            {/* Speed markers */}\n            {[0, 25, 50, 75, 100].map((speed, i) => {\n              const angle = ((i * 180) / 4 - 90) * (Math.PI / 180);\n              const x1 = 100 + 70 * Math.cos(angle);\n              const y1 = 100 + 70 * Math.sin(angle);\n              const x2 = 100 + 80 * Math.cos(angle);\n              const y2 = 100 + 80 * Math.sin(angle);\n              return (\n                <line key={speed} x1={x1} y1={y1} x2={x2} y2={y2} stroke=\"#ccc\" strokeWidth=\"2\" />\n              );\n            })}\n            {/* Speed needle */}\n            <line\n              x1=\"100\"\n              y1=\"100\"\n              x2={100 + 65 * Math.cos((getSpeedometerRotation() - 90) * (Math.PI / 180))}\n              y2={100 + 65 * Math.sin((getSpeedometerRotation() - 90) * (Math.PI / 180))}\n              stroke=\"#ff4444\"\n              strokeWidth=\"4\"\n              strokeLinecap=\"round\"\n            />\n            {/* Center dot */}\n            <circle cx=\"100\" cy=\"100\" r=\"5\" fill=\"#ff4444\" />\n          </svg>\n          {/* Speed value */}\n          <div className=\"hud-speed-text\">{hud.speed} mph</div>\n        </div>\n      </div>\n    </>\n  );\n};\n","import React, { useEffect, useState } from 'react';\n\ninterface BillboardStatsProps {\n  getBillboardStats: () => {\n    placements: Record<string, number>;\n    impressions: Record<string, number>;\n    maxPossibleImpressions: Record<string, number>;\n    trackLength: number;\n    totalSegments: number;\n    totalLaps: number;\n  } | null;\n  isVisible?: boolean;\n}\n\nexport const BillboardStats: React.FC<BillboardStatsProps> = ({\n  getBillboardStats,\n  isVisible = false,\n}) => {\n  const [stats, setStats] = useState<ReturnType<typeof getBillboardStats>>(null);\n\n  useEffect(() => {\n    if (isVisible) {\n      const interval = setInterval(() => {\n        const newStats = getBillboardStats();\n        if (newStats) {\n          setStats(newStats);\n        }\n      }, 1000); // Update every second\n\n      return () => clearInterval(interval);\n    }\n  }, [getBillboardStats, isVisible]);\n\n  if (!isVisible || !stats) return null;\n\n  const billboards = Object.keys(stats.placements).sort();\n\n  return (\n    <div className=\"billboard-stats\">\n      <h4 className=\"billboard-title\">Billboard Analytics</h4>\n      <div>\n        <div className=\"billboard-stat\">\n          <span className=\"billboard-stat-label\">Track:</span>\n          <span className=\"billboard-stat-value\">{stats.trackLength}m</span>\n        </div>\n        <div className=\"billboard-stat\">\n          <span className=\"billboard-stat-label\">Laps:</span>\n          <span className=\"billboard-stat-value\">{stats.totalLaps}</span>\n        </div>\n      </div>\n      <table style={{ width: '100%', fontSize: '0.75rem' }}>\n        <thead>\n          <tr style={{ borderBottom: '1px solid #4b5563' }}>\n            <th style={{ textAlign: 'left', paddingBottom: '0.125rem' }}>Billboard</th>\n            <th style={{ textAlign: 'center', paddingBottom: '0.125rem' }}>Placed</th>\n            <th style={{ textAlign: 'center', paddingBottom: '0.125rem' }}>Shown</th>\n            <th style={{ textAlign: 'right', paddingBottom: '0.125rem' }}>%</th>\n          </tr>\n        </thead>\n        <tbody>\n          {billboards.map((billboard) => {\n            const placed = stats.placements[billboard] || 0;\n            const shown = stats.impressions[billboard] || 0;\n            const maxPossible = stats.maxPossibleImpressions[billboard] || 0;\n            const percentage = maxPossible > 0 ? ((shown / maxPossible) * 100).toFixed(0) : '0';\n\n            return (\n              <tr key={billboard} style={{ borderBottom: '1px solid #374151' }}>\n                <td\n                  style={{\n                    paddingTop: '0.125rem',\n                    paddingBottom: '0.125rem',\n                    fontSize: '0.625rem',\n                  }}\n                >\n                  {billboard.replace('BILLBOARD', 'B')}\n                </td>\n                <td\n                  style={{ textAlign: 'center', paddingTop: '0.125rem', paddingBottom: '0.125rem' }}\n                >\n                  {placed}\n                </td>\n                <td\n                  style={{ textAlign: 'center', paddingTop: '0.125rem', paddingBottom: '0.125rem' }}\n                >\n                  {shown}\n                </td>\n                <td\n                  style={{ textAlign: 'right', paddingTop: '0.125rem', paddingBottom: '0.125rem' }}\n                >\n                  {percentage}%\n                </td>\n              </tr>\n            );\n          })}\n        </tbody>\n        <tfoot>\n          <tr style={{ fontWeight: 'bold', borderTop: '1px solid #6b7280' }}>\n            <td style={{ paddingTop: '0.25rem', fontSize: '0.75rem' }}>TOTAL</td>\n            <td style={{ textAlign: 'center', paddingTop: '0.25rem' }}>\n              {Object.values(stats.placements).reduce((a, b) => a + b, 0)}\n            </td>\n            <td style={{ textAlign: 'center', paddingTop: '0.25rem' }}>\n              {Object.values(stats.impressions).reduce((a, b) => a + b, 0)}\n            </td>\n            <td style={{ textAlign: 'right', paddingTop: '0.25rem' }}>\n              {Object.values(stats.maxPossibleImpressions).reduce((a, b) => a + b, 0) > 0\n                ? (\n                    (Object.values(stats.impressions).reduce((a, b) => a + b, 0) /\n                      Object.values(stats.maxPossibleImpressions).reduce((a, b) => a + b, 0)) *\n                    100\n                  ).toFixed(0)\n                : '0'}\n              %\n            </td>\n          </tr>\n        </tfoot>\n      </table>\n      <div style={{ marginTop: '0.25rem', fontSize: '0.625rem', color: '#9ca3af' }}>\n        <p>% = Shown vs Max Possible ({stats.totalLaps} laps)</p>\n      </div>\n    </div>\n  );\n};\n","import React, { forwardRef } from 'react';\n\ninterface GameCanvasProps {\n  width: number;\n  height: number;\n  className?: string;\n  onClick?: () => void;\n  style?: React.CSSProperties;\n}\n\nexport const GameCanvas = forwardRef<HTMLCanvasElement, GameCanvasProps>(\n  ({ width, height, className = '', onClick, style }, ref) => {\n    return (\n      <div className=\"game-canvas-container\">\n        {/* Canvas */}\n        <canvas\n          ref={ref}\n          width={width}\n          height={height}\n          onClick={onClick}\n          className={`game-canvas ${className}`}\n          style={style}\n        />\n      </div>\n    );\n  }\n);\n\nGameCanvas.displayName = 'GameCanvas';\n","import React from 'react';\n\ninterface GameControlsProps {\n  onControl: (direction: 'up' | 'down' | 'left' | 'right' | 'action' | 'action2') => void;\n  onControlEnd?: (direction: 'up' | 'down' | 'left' | 'right' | 'action' | 'action2') => void;\n  brandColor?: string;\n  showActionButton?: boolean;\n  actionLabel?: string;\n  layout?: 'dpad' | 'arrows' | 'horizontal' | 'racing';\n  actionIcon?: React.ReactNode;\n  action2Label?: string;\n  action2Icon?: React.ReactNode;\n}\n\nexport const GameControls: React.FC<GameControlsProps> = ({\n  onControl,\n  onControlEnd,\n  showActionButton = false,\n  layout = 'dpad',\n  actionLabel = 'A',\n  actionIcon,\n  action2Label = 'B',\n  action2Icon,\n}) => {\n  // Game Boy inspired button styling with text selection prevention\n  const buttonClass = `\n    font-bold text-2xl rounded-lg\n    transition-all duration-150 transform\n    hover:scale-105 active:scale-95\n    bg-gray-600 text-gray-100\n    border-2 border-gray-800\n    shadow-[inset_0_-4px_0_rgba(0,0,0,0.4),0_2px_0_rgba(255,255,255,0.2)]\n    active:shadow-[inset_0_-2px_0_rgba(0,0,0,0.4),0_1px_0_rgba(255,255,255,0.2)]\n    select-none\n  `;\n\n  // Common styles for preventing text selection\n  const preventSelectStyles: React.CSSProperties = {\n    userSelect: 'none',\n    WebkitUserSelect: 'none',\n    MozUserSelect: 'none',\n    msUserSelect: 'none',\n    touchAction: 'none',\n    WebkitTouchCallout: 'none',\n  };\n\n  const handleContextMenu = (e: React.MouseEvent) => {\n    e.preventDefault();\n    return false;\n  };\n\n  // Horizontal layout for games like Breakout\n  if (layout === 'horizontal') {\n    return (\n      <div className=\"flex justify-center gap-6 p-6\">\n        <button\n          onTouchStart={(e) => {\n            e.preventDefault();\n            onControl('left');\n          }}\n          onClick={() => onControl('left')}\n          onContextMenu={handleContextMenu}\n          className={`${buttonClass} px-8 py-4 text-3xl`}\n          style={preventSelectStyles}\n        >\n          ←\n        </button>\n        {showActionButton && (\n          <button\n            onTouchStart={(e) => {\n              e.preventDefault();\n              onControl('action');\n            }}\n            onClick={() => onControl('action')}\n            onContextMenu={handleContextMenu}\n            className={`${buttonClass} px-8 py-4 rounded-full`}\n            style={preventSelectStyles}\n          >\n            {actionIcon || actionLabel}\n          </button>\n        )}\n        <button\n          onTouchStart={(e) => {\n            e.preventDefault();\n            onControl('right');\n          }}\n          onClick={() => onControl('right')}\n          onContextMenu={handleContextMenu}\n          className={`${buttonClass} px-8 py-4 text-3xl`}\n          style={preventSelectStyles}\n        >\n          →\n        </button>\n      </div>\n    );\n  }\n\n  // Racing layout with steering controls on left and action buttons on right\n  if (layout === 'racing') {\n    return (\n      <div className=\"flex justify-between items-center p-4 w-full max-w-md mx-auto\">\n        {/* Steering controls on the left */}\n        <div className=\"flex gap-2\">\n          <button\n            onTouchStart={(e) => {\n              e.preventDefault();\n              onControl('left');\n            }}\n            onTouchEnd={(e) => {\n              e.preventDefault();\n              onControlEnd?.('left');\n            }}\n            onMouseDown={() => onControl('left')}\n            onMouseUp={() => onControlEnd?.('left')}\n            onContextMenu={handleContextMenu}\n            className={`${buttonClass} w-16 h-16 sm:w-20 sm:h-20 text-2xl`}\n            style={preventSelectStyles}\n          >\n            ←\n          </button>\n          <button\n            onTouchStart={(e) => {\n              e.preventDefault();\n              onControl('right');\n            }}\n            onTouchEnd={(e) => {\n              e.preventDefault();\n              onControlEnd?.('right');\n            }}\n            onMouseDown={() => onControl('right')}\n            onMouseUp={() => onControlEnd?.('right')}\n            onContextMenu={handleContextMenu}\n            className={`${buttonClass} w-16 h-16 sm:w-20 sm:h-20 text-2xl`}\n            style={preventSelectStyles}\n          >\n            →\n          </button>\n        </div>\n\n        {/* Action buttons on the right */}\n        <div className=\"flex flex-col gap-2\">\n          <button\n            onTouchStart={(e) => {\n              e.preventDefault();\n              onControl('up');\n            }}\n            onTouchEnd={(e) => {\n              e.preventDefault();\n              onControlEnd?.('up');\n            }}\n            onMouseDown={() => onControl('up')}\n            onMouseUp={() => onControlEnd?.('up')}\n            onContextMenu={handleContextMenu}\n            className={`${buttonClass} w-16 h-12 sm:w-20 sm:h-14 text-lg bg-green-600 hover:bg-green-700`}\n            style={preventSelectStyles}\n          >\n            {actionIcon || actionLabel}\n          </button>\n          <button\n            onTouchStart={(e) => {\n              e.preventDefault();\n              onControl('down');\n            }}\n            onTouchEnd={(e) => {\n              e.preventDefault();\n              onControlEnd?.('down');\n            }}\n            onMouseDown={() => onControl('down')}\n            onMouseUp={() => onControlEnd?.('down')}\n            onContextMenu={handleContextMenu}\n            className={`${buttonClass} w-16 h-12 sm:w-20 sm:h-14 text-lg bg-red-600 hover:bg-red-700`}\n            style={preventSelectStyles}\n          >\n            {action2Icon || action2Label}\n          </button>\n        </div>\n      </div>\n    );\n  }\n\n  if (layout === 'arrows') {\n    return (\n      <div className=\"flex items-center justify-center p-8\">\n        <div className=\"relative w-36 sm:w-48 h-36 sm:h-48\">\n          {/* Background Circle */}\n          <div className=\"absolute inset-0 rounded-full bg-gray-700 opacity-30\" />\n\n          {/* Center Circle */}\n          <div className=\"absolute top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2 w-12 h-12 sm:w-16 sm:h-16 bg-gray-800 rounded-full border-2 border-gray-900 shadow-inner\" />\n          {/* Arrow Buttons */}\n          <button\n            onTouchStart={(e) => {\n              e.preventDefault();\n              onControl('up');\n            }}\n            onTouchEnd={(e) => {\n              e.preventDefault();\n              onControlEnd?.('up');\n            }}\n            onMouseDown={() => onControl('up')}\n            onMouseUp={() => onControlEnd?.('up')}\n            onContextMenu={handleContextMenu}\n            className={`${buttonClass} absolute top-0 left-1/2 transform -translate-x-1/2 w-12 h-12 sm:w-16 sm:h-16 rounded-t-3xl rounded-b-lg`}\n            style={preventSelectStyles}\n          >\n            ↑\n          </button>\n\n          <button\n            onTouchStart={(e) => {\n              e.preventDefault();\n              onControl('left');\n            }}\n            onTouchEnd={(e) => {\n              e.preventDefault();\n              onControlEnd?.('left');\n            }}\n            onMouseDown={() => onControl('left')}\n            onMouseUp={() => onControlEnd?.('left')}\n            onContextMenu={handleContextMenu}\n            className={`${buttonClass} absolute left-0 top-1/2 transform -translate-y-1/2 w-12 h-12 sm:w-16 sm:h-16 rounded-l-3xl rounded-r-lg`}\n            style={preventSelectStyles}\n          >\n            ←\n          </button>\n\n          {showActionButton && (\n            <button\n              onTouchStart={(e) => {\n                e.preventDefault();\n                onControl('action');\n              }}\n              onClick={() => onControl('action')}\n              onContextMenu={handleContextMenu}\n              className={`${buttonClass} col-start-2 row-start-2 w-12 h-12 sm:w-16 sm:h-16 rounded-full`}\n              style={preventSelectStyles}\n            >\n              {actionIcon || actionLabel}\n            </button>\n          )}\n\n          <button\n            onTouchStart={(e) => {\n              e.preventDefault();\n              onControl('right');\n            }}\n            onTouchEnd={(e) => {\n              e.preventDefault();\n              onControlEnd?.('right');\n            }}\n            onMouseDown={() => onControl('right')}\n            onMouseUp={() => onControlEnd?.('right')}\n            onContextMenu={handleContextMenu}\n            className={`${buttonClass} absolute right-0 top-1/2 transform -translate-y-1/2 w-12 h-12 sm:w-16 sm:h-16 rounded-r-3xl rounded-l-lg`}\n            style={preventSelectStyles}\n          >\n            →\n          </button>\n\n          <button\n            onTouchStart={(e) => {\n              e.preventDefault();\n              onControl('down');\n            }}\n            onTouchEnd={(e) => {\n              e.preventDefault();\n              onControlEnd?.('down');\n            }}\n            onMouseDown={() => onControl('down')}\n            onMouseUp={() => onControlEnd?.('down')}\n            onContextMenu={handleContextMenu}\n            className={`${buttonClass} absolute bottom-0 left-1/2 transform -translate-x-1/2 w-12 h-12 sm:w-16 sm:h-16 rounded-b-3xl rounded-t-lg`}\n            style={preventSelectStyles}\n          >\n            ↓\n          </button>\n        </div>\n      </div>\n    );\n  }\n\n  // D-Pad layout\n  return (\n    <div className=\"flex items-center justify-center p-8\">\n      <div className=\"relative w-36 sm:w-48 h-36 sm:h-48\">\n        {/* D-Pad Background */}\n        <div className=\"absolute inset-0 rounded-full bg-gray-700 opacity-30\" />\n\n        {/* Center Circle */}\n        <div className=\"absolute top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2 w-12 h-12 sm:w-16 sm:h-16 bg-gray-800 rounded-full border-2 border-gray-900 shadow-inner\" />\n\n        {/* D-Pad Buttons */}\n        <button\n          onTouchStart={(e) => {\n            e.preventDefault();\n            onControl('up');\n          }}\n          onTouchEnd={(e) => {\n            e.preventDefault();\n            onControlEnd?.('up');\n          }}\n          onMouseDown={() => onControl('up')}\n          onMouseUp={() => onControlEnd?.('up')}\n          onContextMenu={handleContextMenu}\n          className={`${buttonClass} absolute top-0 left-1/2 transform -translate-x-1/2 w-12 h-12 sm:w-16 sm:h-16 rounded-t-3xl rounded-b-lg`}\n          style={preventSelectStyles}\n        >\n          ▲\n        </button>\n\n        <button\n          onTouchStart={(e) => {\n            e.preventDefault();\n            onControl('right');\n          }}\n          onClick={() => onControl('right')}\n          onContextMenu={handleContextMenu}\n          className={`${buttonClass} absolute right-0 top-1/2 transform -translate-y-1/2 w-12 h-12 sm:w-16 sm:h-16 rounded-r-3xl rounded-l-lg`}\n          style={preventSelectStyles}\n        >\n          ▶\n        </button>\n\n        <button\n          onTouchStart={(e) => {\n            e.preventDefault();\n            onControl('down');\n          }}\n          onTouchEnd={(e) => {\n            e.preventDefault();\n            onControlEnd?.('down');\n          }}\n          onMouseDown={() => onControl('down')}\n          onMouseUp={() => onControlEnd?.('down')}\n          onContextMenu={handleContextMenu}\n          className={`${buttonClass} absolute bottom-0 left-1/2 transform -translate-x-1/2 w-12 h-12 sm:w-16 sm:h-16 rounded-b-3xl rounded-t-lg`}\n          style={preventSelectStyles}\n        >\n          ▼\n        </button>\n\n        <button\n          onTouchStart={(e) => {\n            e.preventDefault();\n            onControl('left');\n          }}\n          onClick={() => onControl('left')}\n          onContextMenu={handleContextMenu}\n          className={`${buttonClass} absolute left-0 top-1/2 transform -translate-y-1/2 w-12 h-12 sm:w-16 sm:h-16 rounded-l-3xl rounded-r-lg`}\n          style={preventSelectStyles}\n        >\n          ◀\n        </button>\n\n        {/* Action Button */}\n        {showActionButton && (\n          <button\n            onTouchStart={(e) => {\n              e.preventDefault();\n              onControl('action');\n            }}\n            onClick={() => onControl('action')}\n            onContextMenu={handleContextMenu}\n            className={`${buttonClass} absolute top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2 w-12 h-12 rounded-full z-10`}\n            style={preventSelectStyles}\n          >\n            {actionIcon || actionLabel}\n          </button>\n        )}\n      </div>\n    </div>\n  );\n};\n","'use client';\nimport { useCallback, useEffect, useState } from 'react';\nimport { useCarGame } from './hooks/useCarGame';\nimport { HUD } from './components/HUD';\nimport { BillboardStats } from './components/BillboardStats';\nimport { GameCanvas } from '../ui/GameCanvas';\nimport { GameOverlay } from '../ui/GameOverlay';\nimport { GameControls } from '../ui/GameControls';\nimport { isMobile } from '../../../../utils/functions';\n\ninterface RacingGameProps {\n  laps: number;\n  setPointsEarned: (points: number) => void;\n  setGameOver: (isOver: boolean) => void;\n  /**\n   * Track layout to use:\n   * 0 (default) - Original balanced track with variety\n   * 1 - Speed Circuit: Fast track with long straights\n   * 2 - Mountain Pass: Challenging hills and curves\n   * 3 - Technical Circuit: Lots of curves and turns\n   */\n  track?: number;\n  skin?: string;\n  gameTitle?: string;\n  brandColor?: string;\n  brandLogo?: string;\n  showBillboardStats?: boolean;\n}\n\nconst RacingGame = ({\n  laps,\n  setPointsEarned,\n  setGameOver,\n  track = 0,\n  skin = 'default',\n  gameTitle = 'JALO Racing',\n  brandColor = '#00d26a',\n  brandLogo,\n  showBillboardStats = false,\n}: RacingGameProps) => {\n  const mobile = isMobile();\n  const availableLaps = laps || 3;\n  const [gameStarted, setGameStarted] = useState(false);\n\n  // Use the new custom hook for game logic\n  const {\n    canvasRef,\n    gameState,\n    currentLap,\n    points,\n    hud,\n    startGame,\n    togglePause,\n    setupTouchControls,\n    handleTouchControl,\n    getBillboardStats,\n  } = useCarGame(availableLaps, track, skin, setPointsEarned, setGameOver);\n\n  // Start game when instructions are dismissed\n  const handleGameStart = async () => {\n    setGameStarted(true);\n    await startGame();\n  };\n\n  // Initialize canvas on mount\n  useEffect(() => {\n    if (canvasRef.current) {\n      // Set initial canvas dimensions\n      canvasRef.current.width = 720;\n      canvasRef.current.height = 960;\n    }\n  }, [canvasRef]);\n\n  // Setup touch controls when game starts on mobile\n  useEffect(() => {\n    if (mobile && gameState === 'playing') {\n      setupTouchControls(true);\n    }\n  }, [mobile, gameState, setupTouchControls]);\n\n  // Handle control input from GameControls\n  const handleControl = useCallback(\n    (direction: 'up' | 'down' | 'left' | 'right' | 'action' | 'action2') => {\n      if (gameState !== 'playing') return;\n\n      // Directly update the input state through the hook\n      handleTouchControl(direction, true);\n    },\n    [gameState, handleTouchControl]\n  );\n\n  const handleControlEnd = useCallback(\n    (direction: 'up' | 'down' | 'left' | 'right' | 'action' | 'action2') => {\n      // Directly update the input state through the hook\n      handleTouchControl(direction, false);\n    },\n    [handleTouchControl]\n  );\n\n  // Handle keyboard shortcuts\n  useEffect(() => {\n    const handleKeyDown = (e: KeyboardEvent) => {\n      // Prevent arrow key scrolling\n      const keys: { [key: number]: number } = { 37: 1, 38: 1, 39: 1, 40: 1 };\n      if (keys[e.keyCode]) {\n        e.preventDefault();\n        return false;\n      }\n\n      // Handle pause (ESC or Space)\n      if (gameStarted && (e.key === 'Escape' || e.key === ' ')) {\n        e.preventDefault();\n        togglePause();\n      }\n    };\n\n    window.addEventListener('keydown', handleKeyDown, false);\n    return () => {\n      window.removeEventListener('keydown', handleKeyDown, false);\n    };\n  }, [gameStarted, togglePause]);\n\n  return (\n    <div style={{ width: '100%', position: 'relative' }}>\n      <div\n        style={{\n          width: '100%',\n          position: 'relative',\n          display: 'flex',\n          flexDirection: 'column',\n          gap: '0.25rem',\n          justifyContent: 'center',\n          alignItems: 'center',\n        }}\n      >\n        {/* Instructions Overlay */}\n        {!gameStarted && (\n          <GameOverlay\n            type=\"custom\"\n            title={gameTitle}\n            brandColor={brandColor}\n            onAction={handleGameStart}\n            actionText=\"¡Empezar a Correr!\"\n            customContent={\n              <div style={{ marginBottom: '1rem' }}>\n                {brandLogo && (\n                  <>\n                    <span style={{ fontSize: '0.75rem', color: 'white' }}>por:</span>\n                    <img\n                      src={brandLogo}\n                      alt=\"Brand Logo\"\n                      style={{\n                        margin: '0 auto',\n                        width: '12rem',\n                        height: 'auto',\n                        marginBottom: '1rem',\n                      }}\n                    />\n                  </>\n                )}\n                <p style={{ fontSize: '0.875rem', color: '#d1d5db' }}>\n                  {mobile\n                    ? '¡Usa los controles táctiles para correr!'\n                    : '¡Usa el teclado para correr!'}\n                </p>\n\n                <div style={{ marginTop: '0.5rem' }}>\n                  {mobile ? (\n                    <>\n                      <div\n                        style={{\n                          display: 'flex',\n                          alignItems: 'center',\n                          gap: '0.75rem',\n                          marginBottom: '0.5rem',\n                        }}\n                      >\n                        <kbd\n                          style={{\n                            padding: '0.5rem 0.75rem',\n                            backgroundColor: '#374151',\n                            borderRadius: '0.25rem',\n                            color: 'white',\n                            fontWeight: 'bold',\n                            fontSize: '0.875rem',\n                          }}\n                        >\n                          ←\n                        </kbd>\n                        <span style={{ fontSize: '0.875rem', color: '#d1d5db' }}>\n                          Girar a la izquierda\n                        </span>\n                      </div>\n                      <div\n                        style={{\n                          display: 'flex',\n                          alignItems: 'center',\n                          gap: '0.75rem',\n                          marginBottom: '0.5rem',\n                        }}\n                      >\n                        <kbd\n                          style={{\n                            padding: '0.5rem 0.75rem',\n                            backgroundColor: '#374151',\n                            borderRadius: '0.25rem',\n                            color: 'white',\n                            fontWeight: 'bold',\n                            fontSize: '0.875rem',\n                          }}\n                        >\n                          →\n                        </kbd>\n                        <span style={{ fontSize: '0.875rem', color: '#d1d5db' }}>\n                          Girar a la derecha\n                        </span>\n                      </div>\n                      <div\n                        style={{\n                          display: 'flex',\n                          alignItems: 'center',\n                          gap: '0.75rem',\n                          marginBottom: '0.5rem',\n                        }}\n                      >\n                        <kbd\n                          style={{\n                            padding: '0.5rem 0.75rem',\n                            backgroundColor: '#059669',\n                            borderRadius: '0.25rem',\n                            color: 'white',\n                            fontWeight: 'bold',\n                            fontSize: '0.875rem',\n                          }}\n                        >\n                          🏁\n                        </kbd>\n                        <span style={{ fontSize: '0.875rem', color: '#d1d5db' }}>Acelerar</span>\n                      </div>\n                      <div\n                        style={{\n                          display: 'flex',\n                          alignItems: 'center',\n                          gap: '0.75rem',\n                          marginBottom: '0.5rem',\n                        }}\n                      >\n                        <kbd\n                          style={{\n                            padding: '0.5rem 0.75rem',\n                            backgroundColor: '#dc2626',\n                            borderRadius: '0.25rem',\n                            color: 'white',\n                            fontWeight: 'bold',\n                            fontSize: '0.875rem',\n                          }}\n                        >\n                          🛑\n                        </kbd>\n                        <span style={{ fontSize: '0.875rem', color: '#d1d5db' }}>Frenar</span>\n                      </div>\n                    </>\n                  ) : (\n                    <>\n                      <div\n                        style={{\n                          display: 'flex',\n                          alignItems: 'center',\n                          gap: '0.75rem',\n                          marginBottom: '0.5rem',\n                        }}\n                      >\n                        <kbd\n                          style={{\n                            padding: '0.25rem 0.5rem',\n                            backgroundColor: '#374151',\n                            borderRadius: '0.25rem',\n                            fontSize: '0.75rem',\n                            color: 'white',\n                          }}\n                        >\n                          ←\n                        </kbd>\n                        <span style={{ fontSize: '0.875rem', color: '#d1d5db' }}>o</span>\n                        <kbd\n                          style={{\n                            padding: '0.25rem 0.5rem',\n                            backgroundColor: '#374151',\n                            borderRadius: '0.25rem',\n                            fontSize: '0.75rem',\n                            color: 'white',\n                          }}\n                        >\n                          A\n                        </kbd>\n                        <span style={{ fontSize: '0.875rem', color: '#d1d5db' }}>\n                          - Girar a la izquierda\n                        </span>\n                      </div>\n                      <div\n                        style={{\n                          display: 'flex',\n                          alignItems: 'center',\n                          gap: '0.75rem',\n                          marginBottom: '0.5rem',\n                        }}\n                      >\n                        <kbd\n                          style={{\n                            padding: '0.25rem 0.5rem',\n                            backgroundColor: '#374151',\n                            borderRadius: '0.25rem',\n                            fontSize: '0.75rem',\n                            color: 'white',\n                          }}\n                        >\n                          →\n                        </kbd>\n                        <span style={{ fontSize: '0.875rem', color: '#d1d5db' }}>o</span>\n                        <kbd\n                          style={{\n                            padding: '0.25rem 0.5rem',\n                            backgroundColor: '#374151',\n                            borderRadius: '0.25rem',\n                            fontSize: '0.75rem',\n                            color: 'white',\n                          }}\n                        >\n                          D\n                        </kbd>\n                        <span style={{ fontSize: '0.875rem', color: '#d1d5db' }}>\n                          - Girar a la derecha\n                        </span>\n                      </div>\n                      <div\n                        style={{\n                          display: 'flex',\n                          alignItems: 'center',\n                          gap: '0.75rem',\n                          marginBottom: '0.5rem',\n                        }}\n                      >\n                        <kbd\n                          style={{\n                            padding: '0.25rem 0.5rem',\n                            backgroundColor: '#374151',\n                            borderRadius: '0.25rem',\n                            fontSize: '0.75rem',\n                            color: 'white',\n                          }}\n                        >\n                          ↑\n                        </kbd>\n                        <span style={{ fontSize: '0.875rem', color: '#d1d5db' }}>o</span>\n                        <kbd\n                          style={{\n                            padding: '0.25rem 0.5rem',\n                            backgroundColor: '#374151',\n                            borderRadius: '0.25rem',\n                            fontSize: '0.75rem',\n                            color: 'white',\n                          }}\n                        >\n                          W\n                        </kbd>\n                        <span style={{ fontSize: '0.875rem', color: '#d1d5db' }}>- Acelerar</span>\n                      </div>\n                      <div\n                        style={{\n                          display: 'flex',\n                          alignItems: 'center',\n                          gap: '0.75rem',\n                          marginBottom: '0.5rem',\n                        }}\n                      >\n                        <kbd\n                          style={{\n                            padding: '0.25rem 0.5rem',\n                            backgroundColor: '#374151',\n                            borderRadius: '0.25rem',\n                            fontSize: '0.75rem',\n                            color: 'white',\n                          }}\n                        >\n                          ↓\n                        </kbd>\n                        <span style={{ fontSize: '0.875rem', color: '#d1d5db' }}>o</span>\n                        <kbd\n                          style={{\n                            padding: '0.25rem 0.5rem',\n                            backgroundColor: '#374151',\n                            borderRadius: '0.25rem',\n                            fontSize: '0.75rem',\n                            color: 'white',\n                          }}\n                        >\n                          S\n                        </kbd>\n                        <span style={{ fontSize: '0.875rem', color: '#d1d5db' }}>- Frenar</span>\n                      </div>\n                    </>\n                  )}\n                </div>\n\n                <p style={{ fontSize: '0.75rem', color: '#9ca3af', marginTop: '1rem' }}>\n                  ¡Recolecta monedas y evita chocar con otros autos!\n                </p>\n              </div>\n            }\n          />\n        )}\n\n        {/* Pause Overlay */}\n        {gameState === 'paused' && (\n          <GameOverlay\n            type=\"pause\"\n            title=\"⏸️ PAUSA\"\n            message=\"Presiona ESC para continuar\"\n            onAction={togglePause}\n            actionText=\"Continuar\"\n            brandColor={brandColor}\n          />\n        )}\n\n        {/* Game Area */}\n        <div\n          id=\"racer\"\n          style={{ display: 'flex', justifyContent: 'center', alignItems: 'center', width: '100%' }}\n        >\n          {gameState === 'gameover' && (\n            <GameOverlay type=\"gameOver\" score={points} brandColor={brandColor} />\n          )}\n\n          {/* Game Canvas Container - always present but hidden during ready state */}\n          <div\n            style={{\n              position: 'relative',\n              padding: 0,\n              margin: 0,\n              width: '100%',\n              maxWidth: '360px',\n              height: '480px',\n              display: gameState === 'gameover' ? 'none' : 'block',\n              visibility: gameState === 'ready' ? 'hidden' : 'visible',\n            }}\n          >\n            {/* HUD Component */}\n            <HUD\n              currentLap={currentLap}\n              availableLaps={availableLaps}\n              points={points}\n              hud={hud}\n              gameState={gameState}\n            />\n\n            {/* Game Canvas */}\n            <GameCanvas\n              ref={canvasRef}\n              width={720}\n              height={960}\n              style={{ backgroundColor: '#35cafa', width: '100%', height: '100%' }}\n            />\n          </div>\n        </div>\n\n        {/* Billboard Statistics (Debug Mode) */}\n        <BillboardStats\n          getBillboardStats={getBillboardStats}\n          isVisible={showBillboardStats && gameState === 'playing' && !mobile}\n        />\n\n        {/* Game Controls */}\n        {mobile && gameState === 'playing' && (\n          <GameControls\n            onControl={handleControl}\n            onControlEnd={handleControlEnd}\n            layout=\"racing\"\n            brandColor={brandColor}\n            actionIcon=\"🏁\"\n            action2Icon=\"🛑\"\n          />\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default RacingGame;\n","import { useState, useRef, useCallback, useEffect } from 'react';\nimport type {\n  Car,\n  InputState,\n  HudState,\n  GameConfig,\n  CoinAnimation,\n  CrashAnimation,\n} from '../types';\nimport { RoadEngine } from '../engine/road';\nimport { PhysicsEngine } from '../engine/physics';\nimport { RenderEngine } from '../engine/render';\nimport { GameLoop, ImageLoader, InputManager } from '../engine/gameLoop';\nimport { MathUtils } from '../utils/math';\nimport { DEFAULT_CONFIG, KEY, BACKGROUND } from '../constants';\nimport { isMobile } from '../../../../../utils/functions';\n\n/**\n * Custom hook for managing 3D car game state and logic\n */\nexport function useCarGame(\n  laps: number,\n  track: number,\n  skin: string,\n  setPointsEarned: (points: number) => void,\n  setGameOver: (isOver: boolean) => void\n) {\n  const mobile = isMobile();\n\n  // Game state\n  const [gameState, setGameState] = useState<\n    'loading' | 'ready' | 'playing' | 'paused' | 'gameover'\n  >('loading');\n  const gameStateRef = useRef(gameState);\n  const [currentLap, setCurrentLap] = useState(1);\n  const [points, setPoints] = useState(0);\n  const [hud, setHud] = useState<HudState>({\n    speed: '0',\n    current_lap_time: '00:00:0',\n  });\n  const coinAnimationsRef = useRef<CoinAnimation[]>([]);\n  const crashAnimationsRef = useRef<CrashAnimation[]>([]);\n\n  // Keep gameStateRef in sync\n  useEffect(() => {\n    gameStateRef.current = gameState;\n  }, [gameState]);\n\n  // Refs for game engines and state\n  const canvasRef = useRef<HTMLCanvasElement>(null);\n  const roadEngineRef = useRef<RoadEngine>(null);\n  const physicsEngineRef = useRef<PhysicsEngine>(null);\n  const renderEngineRef = useRef<RenderEngine>(null);\n  const gameLoopRef = useRef<GameLoop>(null);\n  const inputManagerRef = useRef<InputManager>(null);\n\n  // Game world state\n  const gameWorldRef = useRef({\n    position: 0,\n    speed: 0,\n    playerX: 0,\n    playerZ: 0,\n    currentLapTime: 0,\n    cars: [] as Car[],\n    skyOffset: 0,\n    hillOffset: 0,\n    treeOffset: 0,\n    background: null as HTMLImageElement | null,\n    sprites: null as HTMLImageElement | null,\n    hasRendered: false,\n  });\n\n  // Input state\n  const inputStateRef = useRef<InputState>({\n    left: false,\n    right: false,\n    faster: false,\n    slower: false,\n  });\n\n  // Game configuration\n  const configRef = useRef<GameConfig>({\n    ...DEFAULT_CONFIG,\n    cameraDepth: 1 / Math.tan(((DEFAULT_CONFIG.fieldOfView / 2) * Math.PI) / 180),\n    maxSpeed: DEFAULT_CONFIG.segmentLength / ((1 / DEFAULT_CONFIG.fps) * 1.2),\n    accel: 0, // Will be calculated\n    breaking: 0, // Will be calculated\n    decel: 0, // Will be calculated\n    offRoadDecel: 0, // Will be calculated\n    offRoadLimit: 0, // Will be calculated\n    playerZ: 0, // Will be calculated in useEffect\n  });\n\n  // Calculate derived config values\n  useEffect(() => {\n    const config = configRef.current;\n    config.playerZ = config.cameraHeight * config.cameraDepth;\n    config.maxSpeed = config.segmentLength / ((1 / config.fps) * 1.2);\n    config.accel = config.maxSpeed / 5;\n    config.breaking = -config.maxSpeed;\n    config.decel = -config.maxSpeed / 5;\n    config.offRoadDecel = -config.maxSpeed / 2;\n    config.offRoadLimit = config.maxSpeed / 4;\n  }, []);\n\n  /**\n   * Format time for display\n   */\n  const formatTime = useCallback((dt: number): string => {\n    const minutes = Math.floor(dt / 60);\n    const seconds = Math.floor(dt - minutes * 60);\n    const tenths = Math.floor(10 * (dt - Math.floor(dt)));\n\n    if (minutes > 0 && minutes < 10) {\n      return `0${minutes}:${seconds < 10 ? '0' : ''}${seconds}:${tenths}`;\n    }\n    if (minutes > 0 && minutes >= 10) {\n      return `${minutes}:${seconds < 10 ? '0' : ''}${seconds}:${tenths}`;\n    }\n    return `00:${seconds < 10 ? '0' : ''}${seconds}:${tenths < 10 ? '0' : ''}${tenths}`;\n  }, []);\n\n  /**\n   * Update HUD values\n   */\n  const updateHud = useCallback((key: keyof HudState, value: string) => {\n    setHud((prevHud) => {\n      if (prevHud[key] !== value) {\n        return { ...prevHud, [key]: value };\n      }\n      return prevHud;\n    });\n  }, []);\n\n  /**\n   * Initialize game engines\n   */\n  const initializeEngines = useCallback(() => {\n    const canvas = canvasRef.current;\n    if (!canvas) return;\n\n    // Set canvas dimensions\n    const config = configRef.current;\n    canvas.width = config.width;\n    canvas.height = config.height;\n\n    const ctx = canvas.getContext('2d');\n    if (!ctx) return;\n\n    // Initialize engines\n    roadEngineRef.current = new RoadEngine(config.segmentLength, config.rumbleLength);\n    physicsEngineRef.current = new PhysicsEngine({\n      maxSpeed: config.maxSpeed,\n      accel: config.accel,\n      breaking: config.breaking,\n      decel: config.decel,\n      offRoadDecel: config.offRoadDecel,\n      offRoadLimit: config.offRoadLimit,\n      centrifugal: config.centrifugal,\n      trackLength: 0, // Will be updated after road generation\n    });\n    renderEngineRef.current = new RenderEngine(ctx, config.width, config.height);\n    renderEngineRef.current.setCameraDepth(config.cameraDepth);\n    inputManagerRef.current = new InputManager();\n\n    // Setup input handlers\n    inputManagerRef.current.setKeyHandlers([\n      {\n        keys: [KEY.LEFT, KEY.A],\n        mode: 'down',\n        action: () => {\n          inputStateRef.current.left = true;\n        },\n      },\n      {\n        keys: [KEY.RIGHT, KEY.D],\n        mode: 'down',\n        action: () => {\n          inputStateRef.current.right = true;\n        },\n      },\n      {\n        keys: [KEY.UP, KEY.W],\n        mode: 'down',\n        action: () => {\n          inputStateRef.current.faster = true;\n        },\n      },\n      {\n        keys: [KEY.DOWN, KEY.S],\n        mode: 'down',\n        action: () => {\n          inputStateRef.current.slower = true;\n        },\n      },\n      {\n        keys: [KEY.LEFT, KEY.A],\n        mode: 'up',\n        action: () => {\n          inputStateRef.current.left = false;\n        },\n      },\n      {\n        keys: [KEY.RIGHT, KEY.D],\n        mode: 'up',\n        action: () => {\n          inputStateRef.current.right = false;\n        },\n      },\n      {\n        keys: [KEY.UP, KEY.W],\n        mode: 'up',\n        action: () => {\n          inputStateRef.current.faster = false;\n        },\n      },\n      {\n        keys: [KEY.DOWN, KEY.S],\n        mode: 'up',\n        action: () => {\n          inputStateRef.current.slower = false;\n        },\n      },\n    ]);\n\n    return true;\n  }, []);\n\n  /**\n   * Load game assets\n   */\n  const loadAssets = useCallback(async () => {\n    try {\n      const images = await ImageLoader.loadImages(\n        ['background', 'sprites'],\n        '/games/racing/images',\n        skin\n      );\n\n      gameWorldRef.current.background = images[0];\n      gameWorldRef.current.sprites = images[1];\n\n      return true;\n    } catch (error) {\n      console.error('Failed to load game assets:', error);\n      return false;\n    }\n  }, [skin]);\n\n  /**\n   * Reset game world\n   */\n  const resetGame = useCallback(() => {\n    const config = configRef.current;\n    const world = gameWorldRef.current;\n\n    // Reset world state\n    world.position = 0;\n    world.speed = 0;\n    world.playerX = 0;\n    world.currentLapTime = 0;\n    world.skyOffset = 0;\n    world.hillOffset = 0;\n    world.treeOffset = 0;\n\n    // Reset road and cars\n    if (roadEngineRef.current && physicsEngineRef.current) {\n      roadEngineRef.current.reset(track, config.playerZ);\n      const trackLength = roadEngineRef.current.getTrackLength();\n      physicsEngineRef.current.updateTrackLength(trackLength);\n      world.cars = roadEngineRef.current.resetCars(config.totalCars, config.maxSpeed);\n    }\n\n    // Reset UI state\n    setCurrentLap(1);\n    setPoints(0);\n    coinAnimationsRef.current = [];\n    crashAnimationsRef.current = [];\n    updateHud('speed', '0');\n    updateHud('current_lap_time', '00:00:0');\n  }, [track, updateHud]);\n\n  /**\n   * Game update loop\n   */\n  const update = useCallback(\n    (dt: number) => {\n      if (gameStateRef.current !== 'playing') return;\n\n      const config = configRef.current;\n      const world = gameWorldRef.current;\n      const physics = physicsEngineRef.current;\n      const road = roadEngineRef.current;\n\n      if (!physics || !road) return;\n\n      const playerSegment = road.findSegment(world.position + config.playerZ);\n      const startPosition = world.position;\n\n      // Update player physics\n      const playerUpdate = physics.updatePlayer(\n        world.playerX,\n        world.speed,\n        world.position,\n        inputStateRef.current,\n        playerSegment,\n        dt,\n        (z) => road.findSegment(z),\n        config.width,\n        config.height\n      );\n\n      world.playerX = playerUpdate.playerX;\n      world.speed = playerUpdate.speed;\n      world.position = MathUtils.increase(world.position, dt * world.speed, road.getTrackLength());\n\n      // Handle points and crashes\n      if (playerUpdate.pointsEarned !== 0) {\n        setPoints((prev) => Math.max(prev + playerUpdate.pointsEarned, 0));\n      }\n\n      // Handle coin collection animation\n      if (playerUpdate.coinCollected && playerUpdate.pointsEarned > 0) {\n        coinAnimationsRef.current.push({\n          x: playerUpdate.coinCollected!.x,\n          y: playerUpdate.coinCollected!.y,\n          points: playerUpdate.pointsEarned,\n          startTime: Date.now(),\n        });\n      }\n\n      // Handle crash animation\n      if (playerUpdate.crashPosition && playerUpdate.crashed) {\n        crashAnimationsRef.current.push({\n          x: playerUpdate.crashPosition!.x,\n          y: playerUpdate.crashPosition!.y,\n          startTime: Date.now(),\n        });\n      }\n\n      // Update cars\n      physics.updateCars(\n        world.cars,\n        dt,\n        playerSegment,\n        world.playerX,\n        world.speed,\n        config.drawDistance,\n        (z) => road.findSegment(z),\n        road.getSegments()\n      );\n\n      // Update background scroll\n      const scrollUpdate = physics.updateScrollOffsets(\n        world.skyOffset,\n        world.hillOffset,\n        world.treeOffset,\n        playerSegment,\n        startPosition,\n        world.position,\n        config.segmentLength,\n        config.skySpeed,\n        config.hillSpeed,\n        config.treeSpeed\n      );\n\n      world.skyOffset = scrollUpdate.skyOffset;\n      world.hillOffset = scrollUpdate.hillOffset;\n      world.treeOffset = scrollUpdate.treeOffset;\n\n      // Handle lap completion\n      if (world.position > config.playerZ) {\n        if (world.currentLapTime && startPosition < config.playerZ) {\n          setCurrentLap((prev) => prev + 1);\n          road.removeAllCoins();\n          world.currentLapTime = 0;\n        } else {\n          world.currentLapTime += dt;\n        }\n      }\n\n      // Update HUD\n      updateHud('speed', String(5 * Math.round(world.speed / 500)));\n      updateHud('current_lap_time', formatTime(world.currentLapTime));\n    },\n    [formatTime, updateHud]\n  );\n\n  /**\n   * Game render loop\n   */\n  const render = useCallback(\n    (_interpolation: number) => {\n      if (gameStateRef.current !== 'playing') {\n        return;\n      }\n\n      const config = configRef.current;\n      const world = gameWorldRef.current;\n      const renderer = renderEngineRef.current;\n      const road = roadEngineRef.current;\n\n      if (!renderer || !road || !world.background || !world.sprites) return;\n\n      renderer.clear();\n\n      const baseSegment = road.findSegment(world.position);\n      const basePercent = MathUtils.percentRemaining(world.position, config.segmentLength);\n      const playerSegment = road.findSegment(world.position + config.playerZ);\n      const playerPercent = MathUtils.percentRemaining(\n        world.position + config.playerZ,\n        config.segmentLength\n      );\n      const playerY = MathUtils.interpolate(\n        playerSegment.p1.world.y,\n        playerSegment.p2.world.y,\n        playerPercent\n      );\n\n      let x = 0;\n      let dx = -(baseSegment.curve * basePercent);\n      let maxy = config.height;\n\n      // Render background layers\n      renderer.background(\n        world.background,\n        BACKGROUND.SKY,\n        world.skyOffset,\n        renderer.resolution * config.skySpeed * playerY\n      );\n      renderer.background(\n        world.background,\n        BACKGROUND.HILLS,\n        world.hillOffset,\n        renderer.resolution * config.hillSpeed * playerY\n      );\n      renderer.background(\n        world.background,\n        BACKGROUND.TREES,\n        world.treeOffset,\n        renderer.resolution * config.treeSpeed * playerY\n      );\n\n      // Render road segments\n      const segments = road.getSegments();\n      for (let n = 0; n < config.drawDistance; n++) {\n        const segment = segments[(baseSegment.index + n) % segments.length];\n        segment.looped = segment.index < baseSegment.index;\n        segment.fog = MathUtils.exponentialFog(n / config.drawDistance, config.fogDensity);\n        segment.clip = maxy;\n\n        MathUtils.project(\n          segment.p1,\n          world.playerX * config.roadWidth - x,\n          playerY + config.cameraHeight,\n          world.position - (segment.looped ? road.getTrackLength() : 0),\n          config.cameraDepth,\n          config.width,\n          config.height,\n          config.roadWidth\n        );\n        MathUtils.project(\n          segment.p2,\n          world.playerX * config.roadWidth - x - dx,\n          playerY + config.cameraHeight,\n          world.position - (segment.looped ? road.getTrackLength() : 0),\n          config.cameraDepth,\n          config.width,\n          config.height,\n          config.roadWidth\n        );\n\n        x = x + dx;\n        dx = dx + segment.curve;\n\n        if (\n          segment.p1.camera.z <= config.cameraDepth ||\n          segment.p2.screen.y >= segment.p1.screen.y ||\n          segment.p2.screen.y >= maxy\n        ) {\n          continue;\n        }\n\n        renderer.segment(\n          config.lanes,\n          segment.p1.screen.x,\n          segment.p1.screen.y,\n          segment.p1.screen.w,\n          segment.p2.screen.x,\n          segment.p2.screen.y,\n          segment.p2.screen.w,\n          segment.fog,\n          segment.color\n        );\n\n        maxy = segment.p1.screen.y;\n      }\n\n      // Render all objects in correct z-order\n      renderer.renderObjects(\n        segments,\n        baseSegment.index,\n        config.drawDistance,\n        config.roadWidth,\n        world.sprites,\n        (sprite, segmentIndex, offset) => {\n          // Track billboard impressions\n          if (road.getBillboardName) {\n            const billboardName = road.getBillboardName(sprite);\n            if (billboardName) {\n              road.recordBillboardImpression(segmentIndex, offset, billboardName, currentLap);\n            }\n          }\n        }\n      );\n\n      // Render player\n      renderer.player(\n        config.roadWidth,\n        world.sprites,\n        world.speed / config.maxSpeed,\n        config.cameraDepth / config.playerZ,\n        config.width / 2,\n        config.height / 2 -\n          ((config.cameraDepth / config.playerZ) *\n            MathUtils.interpolate(\n              playerSegment.p1.camera.y,\n              playerSegment.p2.camera.y,\n              playerPercent\n            ) *\n            config.height) /\n            2,\n        world.speed * (inputStateRef.current.left ? -1 : inputStateRef.current.right ? 1 : 0),\n        playerSegment.p2.world.y - playerSegment.p1.world.y\n      );\n\n      // Render coin animations\n      const currentTime = Date.now();\n      renderer.renderCoinAnimations(coinAnimationsRef.current, currentTime);\n      renderer.renderCrashAnimations(crashAnimationsRef.current, currentTime);\n\n      // Clean up expired animations\n      coinAnimationsRef.current = coinAnimationsRef.current.filter(\n        (anim) => currentTime - anim.startTime < 500\n      );\n      crashAnimationsRef.current = crashAnimationsRef.current.filter(\n        (anim) => currentTime - anim.startTime < 500\n      );\n    },\n    [currentLap]\n  );\n\n  /**\n   * Start the game\n   */\n  const startGame = useCallback(async () => {\n    setGameState('loading');\n\n    if (!initializeEngines()) {\n      console.error('Failed to initialize game engines');\n      return;\n    }\n\n    const assetsLoaded = await loadAssets();\n    if (!assetsLoaded) {\n      console.error('Failed to load game assets');\n      return;\n    }\n\n    resetGame();\n\n    // Initialize game loop\n    gameLoopRef.current = new GameLoop(update, render, DEFAULT_CONFIG.fps);\n    gameLoopRef.current.start();\n\n    setGameState('playing');\n  }, [initializeEngines, loadAssets, resetGame, update, render]);\n\n  /**\n   * Pause/unpause game\n   */\n  const togglePause = useCallback(() => {\n    if (gameState === 'playing') {\n      setGameState('paused');\n      gameLoopRef.current?.stop();\n    } else if (gameState === 'paused') {\n      setGameState('playing');\n      gameLoopRef.current?.start();\n    }\n  }, [gameState]);\n\n  /**\n   * Stop the game\n   */\n  const stopGame = useCallback(() => {\n    gameLoopRef.current?.stop();\n    inputManagerRef.current?.destroy();\n    setGameState('gameover');\n  }, []);\n\n  // Check for game over condition\n  useEffect(() => {\n    if (currentLap > laps) {\n      setPointsEarned(points);\n      setGameOver(true);\n      stopGame();\n    }\n  }, [currentLap, laps, points, setPointsEarned, setGameOver, stopGame]);\n\n  /**\n   * Setup touch controls for mobile\n   */\n  const setupTouchControls = useCallback((isMobile: boolean) => {\n    if (inputManagerRef.current) {\n      inputManagerRef.current.setupTouchControls(isMobile);\n    }\n  }, []);\n\n  // Setup touch controls after initialization\n  useEffect(() => {\n    if (gameState === 'playing' && inputManagerRef.current) {\n      inputManagerRef.current.setupTouchControls(mobile);\n    }\n  }, [gameState, mobile]);\n\n  // Cleanup on unmount\n  useEffect(() => {\n    return () => {\n      gameLoopRef.current?.stop();\n      inputManagerRef.current?.destroy();\n    };\n  }, []);\n\n  /**\n   * Handle touch control input directly\n   */\n  const handleTouchControl = useCallback(\n    (direction: 'up' | 'down' | 'left' | 'right' | 'action' | 'action2', isPressed: boolean) => {\n      switch (direction) {\n        case 'left':\n          inputStateRef.current.left = isPressed;\n          break;\n        case 'right':\n          inputStateRef.current.right = isPressed;\n          break;\n        case 'up':\n          inputStateRef.current.faster = isPressed;\n          break;\n        case 'down':\n          inputStateRef.current.slower = isPressed;\n          break;\n      }\n    },\n    []\n  );\n\n  /**\n   * Get billboard statistics\n   */\n  const getBillboardStats = useCallback(() => {\n    if (roadEngineRef.current) {\n      return roadEngineRef.current.getBillboardStats(laps);\n    }\n    return null;\n  }, [laps]);\n\n  return {\n    canvasRef,\n    gameState,\n    currentLap,\n    points,\n    hud,\n    availableLaps: laps,\n    startGame,\n    togglePause,\n    stopGame,\n    setupTouchControls,\n    handleTouchControl,\n    getBillboardStats,\n  };\n}\n","'use client';\nimport { useRef, useState } from 'react';\nimport { GameCard } from './ui/GameCard';\nimport { GameOverlay } from './ui/GameOverlay';\nimport RacingGame from './racing/game';\n\nexport default function GameSelector({ visitor, setDialogText, setCurrentAction }) {\n  const [selectedGame, setSelectedGame] = useState('');\n  const [pointsEarned, setPointsEarned] = useState<number>(0);\n  const [gameOver, setGameOver] = useState<boolean>(false);\n\n  const gameRef = useRef<any>(null);\n\n  if (gameOver) {\n    return (\n      <GameOverlay\n        type=\"custom\"\n        title={pointsEarned > 0 ? '🎉 ¡Felicidades!' : '😢 ¡Lo sentimos!'}\n        message={pointsEarned > 0 ? `Ganaste ${pointsEarned} puntos` : 'Intenta de nuevo'}\n        brandColor=\"#00d26a\"\n        onAction={() => {\n          setGameOver(false);\n          setPointsEarned(0);\n          setSelectedGame('');\n        }}\n        actionText=\"Volver al Menú de Juegos\"\n      />\n    );\n  }\n\n  if (selectedGame !== '') {\n    return (\n      <>\n        <div className=\"game-wrapper\" ref={gameRef}>\n          {selectedGame === 'races' && (\n            <RacingGame\n              laps={1}\n              track={1}\n              setGameOver={setGameOver}\n              setPointsEarned={setPointsEarned}\n              showBillboardStats={false}\n              brandColor=\"#ef4444\"\n              gameTitle=\"MAW Racing\"\n              // skin=\"lapi\"\n            />\n          )}\n        </div>\n      </>\n    );\n  }\n\n  return (\n    <div className=\"game-selector-container\">\n      <div className=\"game-selector-header\">\n        <h1 className=\"game-selector-title\">🎮 Juegos</h1>\n        <p className=\"game-selector-subtitle\">Selecciona un juego para comenzar a practicar</p>\n      </div>\n\n      <div className=\"game-selector-grid\">\n        <GameCard\n          title=\"Carreras\"\n          icon=\"🏎️\"\n          gradientFrom=\"#3b82f6\"\n          gradientTo=\"#2563eb\"\n          onClick={() => setSelectedGame('races')}\n          description=\"Velocidad 3D\"\n        />\n      </div>\n    </div>\n  );\n}\n","import React, { useState, lazy, Suspense, useEffect } from 'react';\nimport { ContentProps } from '../../types';\nimport BrowserWindow from './BrowserWindow/BrowserWindow';\n\nimport './Content.css';\nimport './Games/Games.css';\nimport GameSelector from './Games/game-selector';\n\nconst Avatar = lazy(() => import('./Avatar/Avatar'));\nconst Home = lazy(() => import('./Home/Home'));\nconst AboutMe = lazy(() => import('./AboutMe/AboutMe'));\nconst Work = lazy(() => import('./Work/Work'));\nconst Portfolio = lazy(() => import('./Portfolio/Portfolio'));\nconst Contact = lazy(() => import('./Contact/Contact'));\n\nconst Content: React.FC<ContentProps> = ({ name }) => {\n  const greetings = name !== '' ? `Hello, ${name}!` : 'Hello, fellow traveler of the interwebz!';\n  const [dialogText, setDialogText] = useState<string>(greetings);\n  const [currentAction, setCurrentAction] = useState<string>('');\n  const [browserOpen, setBrowserOpen] = useState<boolean>(false);\n  const [isMobile, setIsMobile] = useState<boolean>(window.innerWidth <= 540);\n  const [pendingBrowserOpen, setPendingBrowserOpen] = useState<boolean>(false);\n\n  useEffect(() => {\n    const handleResize = () => {\n      setIsMobile(window.innerWidth <= 540);\n    };\n    window.addEventListener('resize', handleResize);\n    return () => window.removeEventListener('resize', handleResize);\n  }, []);\n\n  const handleBrowserToggle = () => {\n    setBrowserOpen(!browserOpen);\n  };\n\n  const handleNavigate = (action: string) => {\n    setCurrentAction(action);\n\n    // Only these actions should open the browser\n    const browserActions = [\n      'goTo-about',\n      'goTo-work',\n      'goTo-contact',\n      'goTo-portfolio',\n      'goTo-games',\n    ];\n\n    if (isMobile && browserActions.includes(action)) {\n      // For navigation actions on mobile, wait for dialog to complete\n      setPendingBrowserOpen(true);\n    }\n    // Other actions (say-hi, say-meow, chatter, etc.) don't open the browser\n  };\n\n  const handleDialogComplete = () => {\n    // Open browser after dialog completes on mobile\n    if (pendingBrowserOpen) {\n      // Add a 1 second delay before opening the browser\n      setTimeout(() => {\n        setBrowserOpen(true);\n        setPendingBrowserOpen(false);\n      }, 1000);\n    }\n  };\n\n  const renderRightSideComponent = () => {\n    const loader = (\n      <div id=\"loader\">\n        <i className=\"spinner icon\"></i>\n      </div>\n    );\n    switch (currentAction) {\n      case 'goTo-about':\n        return (\n          <Suspense fallback={loader}>\n            <AboutMe setDialogText={setDialogText} setCurrentAction={handleNavigate} />\n          </Suspense>\n        );\n      case 'goTo-work':\n        return (\n          <Suspense fallback={loader}>\n            <Work setDialogText={setDialogText} setCurrentAction={handleNavigate} />\n          </Suspense>\n        );\n      case 'goTo-portfolio':\n        return (\n          <Suspense fallback={loader}>\n            <Portfolio setDialogText={setDialogText} setCurrentAction={handleNavigate} />\n          </Suspense>\n        );\n      case 'goTo-contact':\n        return (\n          <Suspense fallback={loader}>\n            <Contact\n              visitor={name}\n              setDialogText={setDialogText}\n              setCurrentAction={handleNavigate}\n            />\n          </Suspense>\n        );\n      case 'goTo-games':\n        return (\n          <Suspense fallback={loader}>\n            <GameSelector\n              visitor={name}\n              setDialogText={setDialogText}\n              setCurrentAction={handleNavigate}\n            />\n          </Suspense>\n        );\n      default:\n        return (\n          <Suspense fallback={loader}>\n            <Home setDialogText={setDialogText} setCurrentAction={handleNavigate} />\n          </Suspense>\n        );\n    }\n  };\n\n  useEffect(() => {\n    const bgMusic = document.querySelector('#bgMusic') as HTMLAudioElement | null;\n\n    if (bgMusic) {\n      bgMusic.volume = 0.1;\n      bgMusic.play();\n    }\n  }, []);\n\n  return (\n    <Suspense\n      fallback={\n        <div id=\"loader\">\n          <i className=\"spinner icon\"></i>\n        </div>\n      }\n    >\n      <div className=\"ui container main\">\n        <div className=\"ui stackable grid\">\n          <div className=\"seven wide column\">\n            <div className=\"left-side-wrapper\">\n              <Avatar\n                visitor={name}\n                dialogText={dialogText}\n                setDialogText={setDialogText}\n                currentAction={currentAction}\n                setCurrentAction={handleNavigate}\n                onDialogComplete={handleDialogComplete}\n              />\n            </div>\n          </div>\n          <div className={`nine wide column ${browserOpen ? 'browser-open' : ''}`}>\n            <div className=\"right-side-wrapper\">\n              <BrowserWindow\n                currentSection={currentAction}\n                onNavigate={handleNavigate}\n                onClose={isMobile ? handleBrowserToggle : undefined}\n                onOpen={isMobile ? () => setBrowserOpen(true) : undefined}\n                isMobile={isMobile}\n                browserOpen={browserOpen}\n              >\n                {renderRightSideComponent()}\n              </BrowserWindow>\n            </div>\n          </div>\n        </div>\n      </div>\n    </Suspense>\n  );\n};\n\nexport default Content;\n","function _typeof(o) {\n  \"@babel/helpers - typeof\";\n\n  return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) {\n    return typeof o;\n  } : function (o) {\n    return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o;\n  }, _typeof(o);\n}\nexport { _typeof as default };","import _typeof from \"./typeof.js\";\nimport toPrimitive from \"./toPrimitive.js\";\nfunction toPropertyKey(t) {\n  var i = toPrimitive(t, \"string\");\n  return \"symbol\" == _typeof(i) ? i : i + \"\";\n}\nexport { toPropertyKey as default };","import _typeof from \"./typeof.js\";\nfunction toPrimitive(t, r) {\n  if (\"object\" != _typeof(t) || !t) return t;\n  var e = t[Symbol.toPrimitive];\n  if (void 0 !== e) {\n    var i = e.call(t, r || \"default\");\n    if (\"object\" != _typeof(i)) return i;\n    throw new TypeError(\"@@toPrimitive must return a primitive value.\");\n  }\n  return (\"string\" === r ? String : Number)(t);\n}\nexport { toPrimitive as default };","import toPropertyKey from \"./toPropertyKey.js\";\nfunction _defineProperty(e, r, t) {\n  return (r = toPropertyKey(r)) in e ? Object.defineProperty(e, r, {\n    value: t,\n    enumerable: !0,\n    configurable: !0,\n    writable: !0\n  }) : e[r] = t, e;\n}\nexport { _defineProperty as default };","import defineProperty from \"./defineProperty.js\";\nfunction ownKeys(e, r) {\n  var t = Object.keys(e);\n  if (Object.getOwnPropertySymbols) {\n    var o = Object.getOwnPropertySymbols(e);\n    r && (o = o.filter(function (r) {\n      return Object.getOwnPropertyDescriptor(e, r).enumerable;\n    })), t.push.apply(t, o);\n  }\n  return t;\n}\nfunction _objectSpread2(e) {\n  for (var r = 1; r < arguments.length; r++) {\n    var t = null != arguments[r] ? arguments[r] : {};\n    r % 2 ? ownKeys(Object(t), !0).forEach(function (r) {\n      defineProperty(e, r, t[r]);\n    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) {\n      Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r));\n    });\n  }\n  return e;\n}\nexport { _objectSpread2 as default };"],"names":["BackIcon","_jsxs","viewBox","width","height","fill","children","_jsx","d","x","y","ForwardIcon","RefreshIcon","stroke","strokeWidth","strokeLinecap","points","StopIcon","HomeIcon","_ref","currentSection","onNavigate","onClose","onOpen","isMobile","browserOpen","isMaximized","setIsMaximized","useState","className","concat","section","onClick","setTimeout","handleBack","disabled","handleHome","type","value","getSectionUrl","readOnly","GameCard","title","icon","color","gradientFrom","gradientTo","description","bgStyle","background","backgroundColor","style","GameOverlay","message","score","level","brandColor","onAction","actionText","customContent","showPressToStart","showBlink","setShowBlink","useEffect","interval","setInterval","prev","clearInterval","displayTitle","start","pause","gameOver","levelComplete","custom","undefined","toLocaleString","opacity","KEY","ROAD","NONE","SHORT","MEDIUM","LONG","LOW","HIGH","EASY","HARD","COLORS","SKY","TREE","FOG","LIGHT","road","grass","rumble","lane","DARK","START","FINISH","BACKGROUND","w","h","SPRITES_DEF","PALM_TREE","BILLBOARD08","TREE1","DEAD_TREE1","BILLBOARD09","BOULDER3","COLUMN","BILLBOARD01","BILLBOARD06","BILLBOARD05","BILLBOARD07","BOULDER2","TREE2","BILLBOARD04","DEAD_TREE2","BOULDER1","BUSH1","CACTUS","BUSH2","BILLBOARD03","BILLBOARD02","STUMP","SEMI","TRUCK","CAR03","CAR02","CAR04","CAR01","PLAYER_UPHILL_LEFT","PLAYER_UPHILL_STRAIGHT","PLAYER_UPHILL_RIGHT","PLAYER_RIGHT","PLAYER_STRAIGHT","PLAYER_LEFT","COIN","SPRITES","_objectSpread","SCALE","BILLBOARDS","PLANTS","CARS","DEFAULT_CONFIG","fps","roadWidth","segmentLength","rumbleLength","lanes","fieldOfView","cameraHeight","drawDistance","fogDensity","centrifugal","skySpeed","hillSpeed","treeSpeed","totalCars","MathUtils","timestamp","performance","now","toInt","obj","def","arguments","length","parseInt","isNaN","toFloat","parseFloat","limit","min","max","Math","randomInt","round","this","interpolate","random","randomChoice","options","percentRemaining","n","total","accelerate","v","accel","dt","a","b","percent","easeIn","pow","easeOut","easeInOut","cos","PI","exponentialFog","distance","density","E","increase","increment","result","overlap","x1","w1","x2","w2","half1","half2","project","p","cameraX","cameraY","cameraZ","cameraDepth","camera","world","z","screen","scale","RoadEngine","constructor","segments","trackLength","billboardPlacements","Map","billboardImpressions","billboardInstances","nextBillboardId","getSegments","getTrackLength","getBillboardPlacements","getBillboardImpressions","recordBillboardImpression","segmentIndex","offset","billboardName","currentLap","instances","get","instance","find","inst","abs","seenInLaps","has","add","current","set","getBillboardStats","totalLaps","placements","impressions","maxPossibleImpressions","forEach","count","name","realisticTrackLength","totalSegments","findSegment","floor","lastY","p2","addSegment","curve","push","index","p1","sprites","cars","addSprite","sprite","spriteInstance","source","getBillboardName","billboardId","Set","addRoad","enter","hold","leave","startY","endY","addStraight","num","addHill","addCurve","addLowRollingHills","addSCurves","addBumps","addDownhillToEnd","reset","track","playerZ","resetSprites","playerSegment","clear","billboard","i","LANE_POSITIONS","removeAllCoins","segment","filter","resetCars","maxSpeed","car","speed","PhysicsEngine","config","breaking","decel","offRoadDecel","offRoadLimit","updateTrackLength","updatePlayer","playerX","position","inputState","_findSegment","canvasWidth","canvasHeight","playerW","speedPercent","dx","coinCollected","crashPosition","pointsEarned","crashed","left","right","faster","slower","spriteW","coinW","splice","carW","updateCars","playerSpeed","oldSegment","updateCarOffset","newSegment","indexOf","carSegment","calculateAvoidanceDirection","otherCar","otherCarW","obstacleX","carX","updateScrollOffsets","skyOffset","hillOffset","treeOffset","startPosition","deltaPosition","RenderEngine","ctx","resolution","setCameraDepth","depth","updateDimensions","clearRect","polygon","y1","y2","x3","y3","x4","y4","fillStyle","beginPath","moveTo","lineTo","closePath","fog","r1","rumbleWidth","r2","l1","laneMarkerWidth","l2","fillRect","lanew1","lanew2","lanex1","lanex2","layer","rotation","imageW","imageH","sourceX","sourceY","sourceW","sourceH","destY","destW","destH","drawImage","destX","offsetX","offsetY","clipY","clipH","player","steer","updown","bounce","globalAlpha","projectedRoadWidth","renderCars","baseSegmentIndex","spriteScale","spriteX","spriteY","clip","renderSprites","renderObjects","onBillboardRender","renderCoinAnimations","animations","currentTime","save","anim","elapsed","startTime","progress","alpha","particleCount","particleRadius","burstRadius","angle","sin","arc","font","strokeStyle","lineWidth","text","textY","strokeText","fillText","restore","renderCrashAnimations","shakeX","shakeY","textX","GameLoop","update","render","isRunning","animationFrameId","lastTimestamp","accumulator","targetFps","fixedTimeStep","maxFrameTime","frameCount","lastFpsUpdate","currentFps","loop","frameTime","interpolation","updateFpsCounter","requestAnimationFrame","stop","cancelAnimationFrame","getFps","ImageLoader","loadImages","names","basePath","skin","promises","map","loadSingleImage","Promise","all","resolve","reject","img","Image","onload","onerror","Error","src","InputManager","keys","keyHandlers","handleKeyDown","event","keyCode","triggerKeyHandlers","includes","preventDefault","handleKeyUp","setupKeyboardListeners","document","addEventListener","destroy","removeEventListener","setKeyHandlers","handlers","isKeyPressed","mode","handler","action","setupTouchControls","_isMobile","getKeyCodeForDirection","direction","window","isMobileUserAgent","test","navigator","userAgent","isMobileWidth","matchMedia","matches","moreThanOneTouchPoint","maxTouchPoints","HUD","availableLaps","hud","gameState","getSpeedometerRotation","_Fragment","alt","current_lap_time","cx","cy","r","BillboardStats","isVisible","stats","setStats","newStats","billboards","Object","sort","fontSize","borderBottom","textAlign","paddingBottom","placed","shown","maxPossible","percentage","toFixed","paddingTop","replace","fontWeight","borderTop","values","reduce","marginTop","GameCanvas","forwardRef","ref","displayName","GameControls","onControl","onControlEnd","showActionButton","layout","actionLabel","actionIcon","action2Label","action2Icon","buttonClass","preventSelectStyles","userSelect","WebkitUserSelect","MozUserSelect","msUserSelect","touchAction","WebkitTouchCallout","handleContextMenu","e","onTouchStart","onContextMenu","onTouchEnd","onMouseDown","onMouseUp","laps","setPointsEarned","setGameOver","gameTitle","brandLogo","showBillboardStats","mobile","gameStarted","setGameStarted","canvasRef","startGame","togglePause","handleTouchControl","setGameState","gameStateRef","useRef","setCurrentLap","setPoints","setHud","coinAnimationsRef","crashAnimationsRef","roadEngineRef","physicsEngineRef","renderEngineRef","gameLoopRef","inputManagerRef","gameWorldRef","currentLapTime","hasRendered","inputStateRef","configRef","tan","formatTime","useCallback","minutes","seconds","tenths","updateHud","key","prevHud","initializeEngines","canvas","getContext","loadAssets","async","images","error","console","resetGame","physics","playerUpdate","Date","scrollUpdate","String","_interpolation","renderer","baseSegment","basePercent","playerPercent","playerY","maxy","looped","_gameLoopRef$current","_gameLoopRef$current2","stopGame","_gameLoopRef$current3","_inputManagerRef$curr","_gameLoopRef$current4","_inputManagerRef$curr2","isPressed","useCarGame","handleControl","handleControlEnd","display","flexDirection","gap","justifyContent","alignItems","marginBottom","margin","padding","borderRadius","id","maxWidth","visibility","GameSelector","visitor","setDialogText","setCurrentAction","selectedGame","setSelectedGame","gameRef","RacingGame","Avatar","lazy","Home","AboutMe","Work","Portfolio","Contact","greetings","dialogText","currentAction","setBrowserOpen","setIsMobile","innerWidth","pendingBrowserOpen","setPendingBrowserOpen","handleResize","handleNavigate","bgMusic","querySelector","volume","play","Suspense","fallback","onDialogComplete","handleDialogComplete","BrowserWindow","handleBrowserToggle","renderRightSideComponent","loader","_typeof","o","Symbol","iterator","prototype","toPropertyKey","t","toPrimitive","call","TypeError","Number","_defineProperty","defineProperty","enumerable","configurable","writable","ownKeys","getOwnPropertySymbols","getOwnPropertyDescriptor","apply","_objectSpread2","getOwnPropertyDescriptors","defineProperties"],"sourceRoot":""}